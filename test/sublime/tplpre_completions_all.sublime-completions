// Alexander Danylchenko
// BMC tpl\tplre language completions snippet.
// 2017-08-14 - Latest version.
// Will be used also to convert in Atom CSON format
{
    "scope": "source.tplpre",

    "completions": [

// PATTERN BLOCK COMPLETIONS:
        { "trigger": "_Copyright \t BMC Copyright", "contents": "// (c) Copyright 2016 BMC Software, Inc. All rights reserved." },
        { "trigger": "_tpl", "contents": "tpl \\$\\$TPLVERSION\\$\\$ module ${1:Module}.${2:Name};" },
        { "trigger": "_pattern", "contents": "\n\npattern ${1:PatternName} 1.0\n\n\t\"\"\"\n\tPattern trigger on ...\n\tPattern also tries to ...\n\n\tSupported platforms:\n\n\tUNIX\n\tWindows\n\n\t\"\"\"\n\n\tmetadata\n\t\tproducts := '';\n\t\turls := '';\n\t\tpublishers  := '';\n\t\tcategories := '';\n\t\tknown_versions := '', '', '';\n\tend metadata;\n\n\toverview\n\t\ttags TKU, TKU_YYYY_MM_DD, Name, Product;\n\tend overview;\n\n\tconstants\n\t\tsi_type := 'Product Name';\n\tend constants;\n\n\ttriggers\n\t\ton process := DiscoveredProcess where cmd matches unix_cmd \"CMD\" and args matches regex \"ARGS\";\n\tend triggers;\n\n\tbody\n\t\thost := model.host(process);\n\n\n\tend body;\nend pattern;\n\n" },
        { "trigger": "from \tSearchFunctions", "contents": "from SearchFunctions import SearchFunctions ${1:1}.${2:0}; // TODO: Check the current version" },
        { "trigger": "from \tRDBMSFunctions", "contents": "from RDBMSFunctions import RDBMSFunctions ${1:1}.${2:0}; // TODO: Check the current version" },
        { "trigger": "from \tDiscoveryFunctions", "contents": "from DiscoveryFunctions import DiscoveryFunctions ${1:1}.${2:0}; // TODO: Check the current version" },
        { "trigger": "from \tConversionFunctions", "contents": "from ConversionFunctions import ConversionFunctions ${1:1}.${2:0}; // TODO: Check the current version" },

    // METADATA
        { "trigger": "_metadata \t pattern", "contents": "    metadata\n        products := \"\";\n        urls := \"\";\n        publishers  := \"\";\n        categories := \"\";\n        known_versions := \"\", \"\", \"\", \"\", \"\";\n    end metadata;\n" },
        { "trigger": "_metadata \t module", "contents": "metadata\n\torigin := \"TKU\";\n\ttkn_name := \"${1:name}\";\n\ttree_path := '${2:category}', '${3:category}', '${4:category}';\nend metadata;\n" },

    // TRIGGER
        { "trigger": "_triggers \t unix_cmd", "contents": "triggers\n    on process := DiscoveredProcess where cmd matches unix_cmd \"${1:name}\";\nend triggers;\n" },
        { "trigger": "_triggers \t windows_cmd", "contents": "triggers\n    on process := DiscoveredProcess where cmd matches windows_cmd \"${1:name}\";\nend triggers;\n" },
        { "trigger": "_triggers \t host", "contents": "triggers\n    on Host created, confirmed where ${1:name};\nend triggers;\n" },
        { "trigger": "_triggers \t hardware_detail", "contents": "triggers\n    on detail := HardwareDetail created, confirmed\n        where ${1:name};\nend triggers;\n" },
        { "trigger": "_triggers \t management_controller", "contents": "triggers\n    on mc := ManagementController created, confirmed\n        where ${1:name};\nend triggers;\n" },
        { "trigger": "_triggers \t network_device", "contents": "triggers\n    on device := NetworkDevice created, confirmed\n        where ${1:vendor};\nend triggers;\n" },
        { "trigger": "_triggers \t software_instance", "contents": "triggers\n    on SoftwareInstance created, confirmed\n                  where type = ${1:name};\nend triggers;\n" },
        { "trigger": "_triggers \t software_component", "contents": "triggers\n    on SoftwareComponent created, confirmed\n                   where instance = ${1:name};\nend triggers;\n" },

    // IDENTIFIERS
        { "trigger": "_identify \tSimple Identifiers", "contents": "identify ${1:SOME} 1.0\n\ttags simple_identity, ${2:tag1};\n\tDiscoveredProcess cmd -> simple_identity;\nend identify;\n" },

    // TABLES
        { "trigger": "_table \t Two cols", "contents": "table ${1:table_name} 1.0\n\t\"one\" -> \"val_name1\", \"val_name2\";\n\t\"two\"    -> \"val_name3\", \"val_name4\";\n\tdefault  -> \"val_name5\", \"val_name6\";\nend table;\n" },
        { "trigger": "_table \t One col", "contents": "table ${1:table_name} 1.0\n\t\"one\"       -> val_1;\n\t\"two\"       -> val_2;\n\tdefault     -> val_100;\nend table;\n" },

    // DEFINITIONS
        { "trigger": "_definitions \tSmall", "contents": "definitions ${1:def_name} 1.0\n\t'''${2:Describe definitions}'''$0\n\nend definitions;\n" },
        { "trigger": "_definitions \tBig", "contents": "definitions ${1:def_name} 1.0\n\t'''${2:Describe definitions}\n\t   Change History:\n\t   \n\t'''\n\t$0\n\nend definitions;\n" },
        { "trigger": "_define \t Function", "contents": "define ${1:function_name}(${2:argument}) -> ${3:return}\n\t'''\n\t${4:Describe function}\n\t'''\n\n\t$0\n\n\treturn ${5:dummy};\n\nend define;\n" },

    // FULL VERSION
        { "trigger": "_full_version \t(\\d*\\.\\d*)", "contents": "// Assign product version\nif full_version then\n\tproduct_version := regex.extract(full_version, regex '(\\d*\\.\\d*)', raw '\\1');\n\tif not product_version then\n\t\tproduct_version := full_version;\n\tend if;\nend if;\n\n" },
        { "trigger": "_packages \tFind packages", "contents": "packages := model.findPackages( host, [regex \"${1:PACKAGE_NAME}\"] );\nfor package in packages do\n\tif package.version then\n\t\tfull_version := package.version;\n\t\tbreak;\n\tend if;\nend for;" },

// TPLPRE

// COMMON FUNCTIONS:
        { "trigger": "validate_host_address_format \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}validate_host_address_format(${1:rel_host_address});" },
        { "trigger": "domain_lookup \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}domain_lookup(${1:host}, ${2:rel_host_address_domain});" },
        { "trigger": "identify_host_perform_search \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}identify_host_perform_search(${1:host}, ${2:rel_host_address});" },
        { "trigger": "identify_host_perform_search_in_scope \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}identify_host_perform_search_in_scope(${1:host}, ${2:rel_host_address}, ${3:hosts_scope});" },
        { "trigger": "identify_host \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}identify_host(${1:host}, ${2:rel_host_address}, ${3:extended});" },
        { "trigger": "identify_host_extended \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}identify_host_extended(${1:host}, ${2:rel_host_address}, ${3:extended});" },
        { "trigger": "related_sis_search \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}related_sis_search(${1:host}, ${2:rel_host_address}, ${3:rel_si_type});" },
        { "trigger": "related_sis_search_on_multiple_hosts \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}related_sis_search_on_multiple_hosts(${1:host}, ${2:rel_host_addresses}, ${3:rel_si_type});" },
        { "trigger": "related_sis_search_on_multiple_hosts_extended \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}related_sis_search_on_multiple_hosts_extended(${1:host}, ${2:rel_host_addresses}, ${3:rel_si_type});" },
        { "trigger": "related_sis_search_extended \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}related_sis_search_extended(${1:host}, ${2:rel_host_address}, ${3:rel_si_type}, ${4:extended})," },
        { "trigger": "related_si_types_search \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}related_si_types_search(${1:host}, ${2:rel_host_address}, ${3:rel_si_types});" },
        { "trigger": "path_normalization \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}path_normalization(${1:host}, ${2:install_root});" },
        { "trigger": "links_management \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}links_management(${1:si_node}, ${2:recently_found_sis}, ${3:related_si_type});" },
        { "trigger": "get_cleanedup_path \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}get_cleanedup_path(${1:path}, ${2:os});" },
        { "trigger": "get_max_version \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}get_max_version(${1:ver1}, ${2:ver2});" },
        { "trigger": "get_exe_cwd_path \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}get_exe_cwd_path(${1:process}, ${2:expected_binary_name});" },
        { "trigger": "sort_list \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}sort_list(${1:list});" },
        { "trigger": "run_priv_cmd \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}run_priv_cmd(${1:host}, ${2:command}, priv_cmd := 'PRIV_RUNCMD');" },
        { "trigger": "has_process \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}has_process(${1:host}, ${2:command});" },
        { "trigger": "isValidSerialNumber \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}isValidSerialNumber(${1:serial});" },
        { "trigger": "convertToCharString \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}convertToCharString(${1:ascii_codes});" },
        { "trigger": "wmiFollowAssociations \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}wmiFollowAssociations(${1:host}, ${2:namespace}, ${3:initial_paths}, ${4:associations});" },
        { "trigger": "checkForDecimal \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}checkForDecimal(${1:value}, ${2:bValue});" },
        { "trigger": "convertToBytes \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}convertToBytes(${1:value}, ${2:gib});" },
        { "trigger": "identify_host_with_uuid \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}identify_host_with_uuid(${1:uuid});" },
        { "trigger": "locateCommands \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}locateCommands(${1:host}, ${2:command_list});" },
        { "trigger": "find_server \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}find_server(${1:host}, ${2:server_address}, ${3:port}, ${4:si_type}, alt_types := ${5:none}, all := ${6:false});" },
        { "trigger": "checkCommandList \tOLD _functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:functions\\.)/}checkCommandList(${1:host}, ${2:command_list});" },


// CONVERSION FUNCTIONS:
        { "trigger": "isValidSerialNumber \tConversionFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:ConversionFunctions\\.)/}isValidSerialNumber(${1:serial});" },
        { "trigger": "convertToCharString \tConversionFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:ConversionFunctions\\.)/}convertToCharString(${1:ascii_codes});" },
        { "trigger": "convertToBytes \tConversionFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:ModuleName\\.)/}${1:value}, ${2:gib});" },


//DISCOVERY BUILT IN FUNCTIONS:
        { "trigger": "process \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}process(${1:process});" },
        { "trigger": "children \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}children(${1:process});" },
        { "trigger": "descendents \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}descendents(${1:process});" },
        { "trigger": "parent \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}parent(${1:process});" },
        { "trigger": "allProcesses \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}allProcesses(${1:process});" },
        { "trigger": "access \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}access(${1:process});" },

    // GET AND QUERY
        { "trigger": "fileGet \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}fileGet(host, ${1:config_filepath});" },
        { "trigger": "fileInfo \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}fileInfo(host, \"${1:file_path}\");" },
        { "trigger": "getNames \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}getNames(${1:target}, ${2:ip_address});" },
        { "trigger": "listDirectory \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}listDirectory(host, ${1:directory});" },
        { "trigger": "listRegistry \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}listRegistry(host, ${1:registry_root});" },
        { "trigger": "registryKey \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}registryKey(host, ${1:reg_key_inst_dir});" },
        { "trigger": "wmiQuery \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}wmiQuery(host, ${1:wmiQuery}, ${2:wmiNS});" },
        { "trigger": "wmiQuery raw \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}wmiQuery(host, ${1:wmiQuery}, raw \"${2:path_to}\");" },
        { "trigger": "wbemQuery \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}wbemQuery(${1:target}, ${2:class_name}, [${3:properties}], ${4:namespace});" },
        { "trigger": "wbemEnumInstances \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}wbemEnumInstances(${1:target}, ${2:class_name}, ${3:properties}, ${4:namespace}, ${5:filter_locally});" },
        { "trigger": "runCommand \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}runCommand(host, \"${1:command_to_run}\");" },
        { "trigger": "snmpGet \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}snmpGet(${1:target}, ${2:oid_table}, [${3:binary_oid_list}]);" },
        { "trigger": "snmpGetTable \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}snmpGetTable(${1:target}, ${2:table_oid}, ${3:column_table}, [${4:binary_oid_list}]);" },

    // MATRIX
        { "trigger": "filepath_info \tMatrix", "contents": "$0// *filepath_info_start\n$0// filepath_windows := \"${1:filepath_windows}\"\n$0// filepath_unix := \"${2:filepath_unix}\"\n$0// reason := \"${3:Obtain something}\"\n$0// when := \"${4:Only if installation is path obtained}\"\n$0// *filepath_info_end" },
        { "trigger": "command_info \tMatrix", "contents": "$0// *command_info_start\n$0// command_windows := \"${1:command_windows}\"\n$0// command_unix := \"${2:command_unix}\"\n$0// reason := \"${3:Obtain something}\"\n$0// when := \"${4:Only if installation path is obtained}\"\n$0// *command_info_end" },
        { "trigger": "filepath_info Unix \tMatrix", "contents": "$0// *filepath_info_start\n$0// filepath_unix := \"${2:filepath_unix}\"\n$0// reason := \"${3:Obtain something}\"\n$0// when := \"${4:Only if installation is path obtained}\"\n$0// *filepath_info_end" },
        { "trigger": "command_info Windows \tMatrix", "contents": "$0// *command_info_start\n$0// command_windows := \"${1:command_windows}\"\n$0// reason := \"${3:Obtain something}\"\n$0// when := \"${4:Only if installation path is obtained}\"\n$0// *command_info_end" },

    // REST
        { "trigger": "restfulGet \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}restfulGet(${1:target}, ${2:protocol}, ${3:path}[, ${4:header}]);" },
        { "trigger": "restfulPost \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}restfulPost(${1:target}, ${2:protocol}, ${3:path}, ${4:body}[, ${5:header}]);" },

    // JSON
        { "trigger": "encode \tjson", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:json\\.)/}encode(${1:value});" },
        { "trigger": "decode \tjson", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:json\\.)/}decode(${1:value});" },

    // vSphere
        { "trigger": "vSphereFindObjects \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}vSphereFindObjects(vc_host, \"HostSystem\", [\"name\", \"hardware.systemInfo.uuid\"]);" },
        { "trigger": "vSphereTraverseToObjects \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}vSphereTraverseToObjects(host, \"HostSystem\", storage_info.storage_id, \"datastore\", \"Datastore\", [\"name\"]);" },
        { "trigger": "vSphereGetProperties \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}vSphereGetProperties(host, \"HostSystem\", host_id, [\"config.storageDevice.scsiLun[\\\"%disk_info.key%\\\"].deviceName\", \"config.storageDevice.scsiLun[\\\"%disk_info.key%\\\"].capabilities.updateDisplayNameSupported\"]);" },
        { "trigger": "vSphereGetPropertyTable \tdiscovery", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:discovery\\.)/}vSphereGetPropertyTable(host, \"HostSystem\", host_id, \"config.storageDevice.scsiLun\", [\"serialNumber\", \"deviceName\"]);" },


// DISCOVERY FUNCTIONS
        { "trigger": "pathNormalization \tDiscoveryFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:DiscoveryFunctions\\.)/}pathNormalization(${1:host}, ${2:install_root});" },
        { "trigger": "getCleanedupPath \tDiscoveryFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:DiscoveryFunctions\\.)/}getCleanedupPath(${1:path}, ${2:os});" },
        { "trigger": "getMaxVersion \tDiscoveryFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:DiscoveryFunctions\\.)/}getMaxVersion(${1:ver1}, ${2:ver2});" },
        { "trigger": "getExeCwdPath \tDiscoveryFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:DiscoveryFunctions\\.)/}getExeCwdPath(${1:process}, ${2:expected_binary_name});" },
        { "trigger": "sortList \tDiscoveryFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:DiscoveryFunctions\\.)/}sortList(${1:list});" },
        { "trigger": "runActiveCommand \tDiscoveryFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:DiscoveryFunctions\\.)/}runActiveCommand(${1:host}, ${2:command_line}, expected_content_regex := ${3:none}, priv_cmd := ${4:none});" },
        { "trigger": "locateCommands \tDiscoveryFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:DiscoveryFunctions\\.)/}locateCommands(${1:host}, ${2:command_list});" },
        { "trigger": "checkCommandList \tDiscoveryFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:DiscoveryFunctions\\.)/}checkCommandList(${1:host}, ${2:command_list});" },


// RDBMS OLD:
        { "trigger": "oracle_ora_file_parser \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}oracle_ora_file_parser(${1:section_name}, ${2:oracle_ora_file_content});" },
        { "trigger": "perform_rdbms_sis_search \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}perform_rdbms_sis_search(${1:related_sis_raw}, ${2:rel_si_type}, ${3:instance}, ${4:port}, ${5:db_name}, ${6:extended});" },
        { "trigger": "related_rdbms_sis_search \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}related_rdbms_sis_search(${1:host}, ${2:rel_host_address}, ${3:rel_si_type}, ${4:instance}, ${5:port}, ${6:db_name}, ${7:extended});" },
        { "trigger": "related_rdbms_sis_search_extended \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}related_rdbms_sis_search_extended(${1:host}, ${2:rel_host_address}, ${3:rel_si_type}, ${4:instance}, ${5:port}, ${6:db_name}, ${7:extended});" },
        { "trigger": "oracle_net_service_name_search \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}oracle_net_service_name_search(${1:host}, ${2:net_service_name}, ${3:tnsnames_file_full_location});" },
        { "trigger": "dsn_rdbms_servers \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}dsn_rdbms_servers(${1:host}, ${2:dsn_name});" },
        { "trigger": "parseJDBC \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}parseJDBC(${1:url});" },
        { "trigger": "jdbc_search \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}jdbc_search(${1:host}, ${2:jdbc_url});" },
        { "trigger": "find_db_server \tOLD _rdbms_functions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:rdbms_functions\\.)/}find_db_server(${1:host}, ${2:server_address}, ${3:port}, ${4:si_type}, ${5:db_details});" },


// RDBMS NEW:
        { "trigger": "oracleOraFileParser \tRDBMSFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:RDBMSFunctions\\.)/}oracleOraFileParser(${1:section_name}, ${2:oracle_ora_file_content}); // -> section" },
        { "trigger": "performRdbmsSisSearch \tRDBMSFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:RDBMSFunctions\\.)/}performRdbmsSisSearch(related_sis_raw = ${1:related_sis_raw},\n\t\t\t\t\t\t\t\t\t\t rel_si_type = ${2:rel_si_type},\n\t\t\t\t\t\t\t\t\t\t port = ${3:port},\n\t\t\t\t\t\t\t\t\t\t instance = ${4:instance},\n\t\t\t\t\t\t\t\t\t\t db_name = ${5:db_name},\n\t\t\t\t\t\t\t\t\t\t ora_service_name = ${6:ora_service_name},\n\t\t\t\t\t\t\t\t\t\t db2_copy_name = ${7:db2_copy_name}); // ->  -> related_rdbms_nodes" },
        { "trigger": "oracleNetServiceNameSearch \tRDBMSFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:RDBMSFunctions\\.)/}oracleNetServiceNameSearch(host = ${1:host},\n\t\t\t\t\t\t\t\t\t\t  net_service_name = ${2:net_service_name},\n\t\t\t\t\t\t\t\t\t\t  tnsnames_file_full_location = ${3:tnsnames_file_full_location}); // -> ora_host, ora_sid, ora_service_name" },
        { "trigger": "dsnRdbmsServers \tRDBMSFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:RDBMSFunctions\\.)/}dsnRdbmsServers(host, dsn_name); // -> db_host, db_type, db_instance, ora_service_name, db_port, db_name" },
        { "trigger": "parseJDBC \tRDBMSFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:RDBMSFunctions\\.)/}parseJDBC(url); // -> db_type, db_host, db_port, db_name, oracle_tns_alias, oracle_service_name" },


// SEARCH FUNCTIONS:
        { "trigger": "getNodeIp \tSearchFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getNodeIp(host, ${1:rel_host_address_domain}); // -> node_ip" },
        { "trigger": "getHostingNodes \tSearchFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getHostingNodes(host, ${1:node_address}, balancer_port := ${2:none}); // -> hosting_nodes, nodes_type" },
        { "trigger": "getSI \tSearchFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getSI(${1:related_node}, ${2:si_types_raw}); // -> related_si" },
        { "trigger": "identifyHostWithUuid \tSearchFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}identifyHostWithUuid(${1:uuid}); // -> searched_host" },
        { "trigger": "relatedSisSearchOnMultipleHosts \tSearchFunctions", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}relatedSisSearchOnMultipleHosts(host, rel_host_addresses = ${1:rel_host_addresses}, rel_si_type = ${2:rel_si_type}); // -> related_sis" },

    // GET SOFTWARE NODES
        { "trigger": "getSoftwareNodes \tSearchNodesFull", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getSoftwareNodes(host,\n\t\t\t\t\t\t\t\t node_address           := ${1:none},\n\t\t\t\t\t\t\t\t software_type          := ${2:none},\n\t\t\t\t\t\t\t\t balancer_port          := ${3:none},\n\t\t\t\t\t\t\t\t port                   := ${4:none},\n\t\t\t\t\t\t\t\t instance               := ${5:none},\n\t\t\t\t\t\t\t\t listen_tcp_socket      := ${6:none},\n\t\t\t\t\t\t\t\t server_name            := ${7:none},\n\t\t\t\t\t\t\t\t installed_product      := ${8:none},\n\t\t\t\t\t\t\t\t db_name                := ${9:none},\n\t\t\t\t\t\t\t\t net_service_name       := ${10:none},\n\t\t\t\t\t\t\t\t ora_service_name       := ${11:none},\n\t\t\t\t\t\t\t\t db2_copy_name          := ${12:none},\n\t\t\t\t\t\t\t\t dsn_name               := ${13:none},\n\t\t\t\t\t\t\t\t jdbc_url               := ${14:none},\n\t\t\t\t\t\t\t\t tnsnames_file_location := ${15:none},\n\t\t\t\t\t\t\t\t get_remote_nodes_only  := ${16:none}\n\t\t\t\t\t\t\t\t); // -> software_nodes\n" },
    // GET SOFTWARE NODES JDBC
        { "trigger": "getSoftwareNodes \t_jdbc_url", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getSoftwareNodes(host, jdbc_url=${2:jdbc_url});\n" },
        { "trigger": "getSoftwareNodes \t_jdbc_search", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getSoftwareNodes(host, jdbc_url=${2:jdbc_url});\n" },

    // GET SOFTWARE NODES CUSTOM
        { "trigger": "getSoftwareNodes \tSearchDatabase", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getSoftwareNodes(host,\n\t\t\t\t\t\t\t\t node_address  := ${1:db_host},\n\t\t\t\t\t\t\t\t software_type := \"${2:db_type}\",\n\t\t\t\t\t\t\t\t db_name       := ${3:db_name}\n\t\t\t\t\t\t\t\t);\n" },
        { "trigger": "getSoftwareNodes \tSearchDB+port", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getSoftwareNodes(host,\n\t\t\t\t\t\t\t\t node_address  := ${1:db_host},\n\t\t\t\t\t\t\t\t software_type := ${2:db_type},\n\t\t\t\t\t\t\t\t port          := ${3:port},\n\t\t\t\t\t\t\t\t instance      := ${4:instance},\n\t\t\t\t\t\t\t\t db_name       := ${5:db_name}\n\t\t\t\t\t\t\t\t);" },
        { "trigger": "getSoftwareNodes \tSearchNodeonLB", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:SearchFunctions\\.)/}getSoftwareNodes(host,\n\t\t\t\t\t\t\t\t node_address  := ${1:db_host},\n\t\t\t\t\t\t\t\t balancer_port := ${2:none}\n\t\t\t\t\t\t\t\t);\n" },


// REGEX USUAL USAGE:
        { "trigger": "_regex \tfull ver (\\d+(?:\\.\\d+)*)", "contents": "(\\d+(?:\\.\\d+)*)" },
        { "trigger": "_regex \tfull ver ^(\\d+(?:\\.\\d+)?)", "contents": "^(\\d+(?:\\.\\d+)?)" },
        { "trigger": "_regex \tproduct ver (\\d+(?:\\.\\d+)?)", "contents": "(\\d+(?:\\.\\d+)?)" },
        { "trigger": "_regex \tbjavaw (?i)\\bjavaw?(?:\\.exe)\\$", "contents": "(?i)\\bjavaw?(?:\\.exe)\\$" },
        { "trigger": "_regex \tbjava (?i)\\bjava(?:\\.exe)?\\$", "contents": "(?i)\\bjava(?:\\.exe)?\\$" },
        { "trigger": "_regex \tjava (?i)^(\\w:.*\\)Java\\", "contents": "(?i)^(\\w:.*\\)Java\\" },
        { "trigger": "_regex \tjava (/\\.+/)java/", "contents": "^(/\\.+/)java/" },
        { "trigger": "_regex \tipv4 (\\d+(?:\\.\\d+){3})", "contents": "(\\d+(?:\\.\\d+){3})" },
        { "trigger": "_regex \tver ^(\\d+)", "contents": "^(\\d+)" },
        { "trigger": "_regex \tver ^\\d+\\$", "contents": "^\\d+\\$" },
        { "trigger": "_regex \tWin_path", "contents": "(?i)\\\"([^\"]+)PATH_TO_FILE_LIB\\\"" },
        { "trigger": "_regex \tWin_path_alt", "contents": "([^\"]+)PATH_TO_FILE_CONF" },


// INFERRENCE
        { "trigger": "associate \tinference", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:inference\\.)/}associate(${1:inferred_node}, ${2:associate});" },
        { "trigger": "contributor \tinference", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:inference\\.)/}contributor(${1:inferred_node}, ${2:contributor}, ${3:contributes});" },
        { "trigger": "primary \tinference", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:inference\\.)/}primary(${1:inferred_node}, ${2:primary});" },
        { "trigger": "relation \tinference", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:inference\\.)/}relation(${1:inferred_relationship}, ${2:source});" },
        { "trigger": "withdrawal \tinference", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:inference\\.)/}withdrawal(${1:inferred_node}, ${2:evidence}, ${3:withdrawn});" },
        { "trigger": "destruction \tinference", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:inference\\.)/}destruction(${1:destroyed_node}, ${2:source};)" },


// MODEL FUNCTIONS:


        { "trigger": "model.host \tmodel.host", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}host(${1:process});" },
        { "trigger": "model.hosts \tmodel.hosts", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}hosts(${1:model_sis});" },
        { "trigger": "model.destroy \tmodel.destroy", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}destroy(${1:dummy});" },
        { "trigger": "model.kind \tmodel.kind", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}kind(${1:hosting_node});" },
        { "trigger": "model.findPackages \tmodel.findPackages", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}findPackages(host, [regex \"${1:}\"]);" },
        { "trigger": "model.withdraw \tmodel.withdraw", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}withdraw(si_node, \"${1:detail}\");" },

    // ADD
        { "trigger": "addContainment \tmodel.addContainment", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}addContainment(${1:si_node}, ${2:software_components});" },
        { "trigger": "addDisplayAttribute \tmodel.addDisplayAttribute", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}addDisplayAttribute(${1:wls_si}, ${2:tw_meta_data_attr});" },
        { "trigger": "removeDisplayAttribute \tmodel.removeDisplayAttribute", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}removeDisplayAttribute(${1:wls_si}, ${2:tw_meta_data_attr});" },
        { "trigger": "setContainment \tmodel.setContainment", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}setContainment(${1:cluster_si_node}, ${2:related_sis});" },
        { "trigger": "setRemovalGroup \tmodel.setRemovalGroup", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}setRemovalGroup(${1:cluster_si}, \"${2:Dummy_Server_Cluster}\");" },
        { "trigger": "anchorRemovalGroup \tmodel.anchorRemovalGroup", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}anchorRemovalGroup(${1:si}, \"${2:license_dts}\");" },
        { "trigger": "suppressRemovalGroup \tmodel.suppressRemovalGroup", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}suppressRemovalGroup(\"%${1:detail_type}%\");" },

    // REL
        { "trigger": "Communication \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.Communication(Server := ${1:related_sis}, Client := ${2:si_node});" },
        { "trigger": "Containment \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.Containment(Contained := ${1:cluster_member_node}, Container := ${2:cluster});" },
        { "trigger": "Dependency \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.Dependency(Dependant := ${1:si_node}, DependedUpon := ${2:dep_si});" },
        { "trigger": "Detail \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.Detail(ElementWithDetail := ${1:si_node}, Detail := ${2:details});" },
        { "trigger": "HostContainment \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.HostContainment(HostContainer := ${1:si_node}, ContainedHost := ${2:host});" },
        { "trigger": "HostedFile \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.HostedFile(HostedFile := ${1:file}, Host := ${2:host});" },
        { "trigger": "HostedSoftware \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.HostedSoftware(Host := ${1:host}, RunningSoftware := ${2:si_node});" },
        { "trigger": "Management \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.Management(Manager := ${1:manager_si}, ManagedElement := ${2:si_node});" },
        { "trigger": "RelatedFile \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.RelatedFile(ElementUsingFile := ${1:si_node}, File := ${2:file});" },
        { "trigger": "SoftwareService \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.SoftwareService(ServiceProvider := ${1:si_node}, Service := ${2:cluster});" },
        { "trigger": "SoftwareContainment \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.SoftwareContainment(SoftwareContainer := ${1:si_node}, ContainedSoftware := ${2:sc_lst});" },
        { "trigger": "StorageUse \trel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}rel.StorageUse(Consumer := ${1:virtual_disk}, Provider := ${2:dest_disks});" },

    // UNIQUE REL
        { "trigger": "Communication \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.Communication(Server := ${1:related_sis}, Client := ${2:si_node});" },
        { "trigger": "Containment \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.Containment(Contained := ${1:cluster_member_node}, Container := ${2:cluster});" },
        { "trigger": "Dependency \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.Dependency(Dependant := ${1:si_node}, DependedUpon := ${2:dep_si});" },
        { "trigger": "Detail \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.Detail(ElementWithDetail := ${1:si_node}, Detail := ${2:details});" },
        { "trigger": "HostContainment \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.HostContainment(HostContainer := ${1:si_node}, ContainedHost := ${2:host});" },
        { "trigger": "HostedFile \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.HostedFile(HostedFile := ${1:file}, Host := ${2:host});" },
        { "trigger": "HostedSoftware \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.HostedSoftware(Host := ${1:host}, RunningSoftware := ${2:si_node});" },
        { "trigger": "HostedService \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.HostedService(ServiceHost := ${1:cluster}, RunningService := ${2:cluster_service_node});" },
        { "trigger": "Management \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.Management(Manager := ${1:manager_si}, ManagedElement := ${2:si_node});" },
        { "trigger": "RelatedFile \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.RelatedFile(ElementUsingFile := ${1:si_node}, File := ${2:file});" },
        { "trigger": "SoftwareService \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.SoftwareService(ServiceProvider := ${1:si_node}, Service := ${2:cluster});" },
        { "trigger": "SoftwareContainment \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.SoftwareContainment(SoftwareContainer := ${1:si_node}, ContainedSoftware := ${2:sc_lst});" },
        { "trigger": "StorageUse \tuniquerel", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.StorageUse(Consumer := ${1:virtual_disk}, Provider := ${2:dest_disks});" },

    // Customization:
        { "trigger": "SoftwareInstance \tShort", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}SoftwareInstance(key := key,\n\t$0name := name,\n\t$0short_name := short_name\n\t);" },
        { "trigger": "SoftwareInstance \tKey", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}SoftwareInstance(key             := \"%port%/%key_si_type%/%host.key%\",\n$0\t\t\t\t\t   name            := name,\n$0\t\t\t\t\t   short_name      := short_name,\n$0\t\t\t\t\t   version         := full_version,\n$0\t\t\t\t\t   product_version := product_version,\n$0\t\t\t\t\t   port            := port,\n$0\t\t\t\t\t   listening_ports := listening_ports,\n$0\t\t\t\t\t   type            := si_type\n$0\t\t\t\t\t   );\n" },
        { "trigger": "SoftwareInstance \tKey_group", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}SoftwareInstance(key             := \"%port%/%key_si_type%/%host.key%\",\n$0\t\t\t\t\t   name            := name,\n$0\t\t\t\t\t   short_name      := short_name,\n$0\t\t\t\t\t   version         := full_version,\n$0\t\t\t\t\t   product_version := product_version,\n$0\t\t\t\t\t   port            := port,\n$0\t\t\t\t\t   listening_ports := listening_ports,\n$0\t\t\t\t\t   type            := si_type\n$0\t\t\t\t\t   );\n" },
        { "trigger": "SoftwareInstance \tDetailed", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}SoftwareInstance(key              := \"%product_version%/%si_type%/%host.key%\",\n$0\t\t\t\t\t\t   name             := name,\n$0\t\t\t\t\t\t   short_name       := short_name,\n$0\t\t\t\t\t\t   version          := full_version,\n$0\t\t\t\t\t\t   product_version  := product_version,\n$0\t\t\t\t\t\t   publisher        := publisher,\n$0\t\t\t\t\t\t   product          := product,\n$0\t\t\t\t\t\t   type             := si_type\n$0\t\t\t\t\t\t  );\n" },

    // Extra
        { "trigger": "Communication type \tmodel.uniquerel.", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:model\\.)/}uniquerel.Communication(Server := ${1:related_sis}, Client := ${2:si_node}, type := \"${3:%type%}\");" },


// NUMBER FUNCTIONS:
        { "trigger": "toChar \tnumber", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:number\\.)/}toChar(${1:number});" },
        { "trigger": "toText \tnumber", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:number\\.)/}toText(${1:number});" },
        { "trigger": "range \tnumber", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:number\\.)/}range(${1:number});" },


// TEXT FUNCTIONS:
        { "trigger": "lower \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}lower(string)" },
        { "trigger": "upper \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}upper(string)" },
        { "trigger": "toNumber \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}toNumber(port);" },

    // REPLACE
        { "trigger": "replace \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}replace(${1:where_string}, \"${2:from_char}\", \"${3:to_char}\");" },
        { "trigger": "replace \t , to .", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}replace(${1:string}, \",\", \".\");" },
        { "trigger": "replace \t - to .", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}replace(${1:string}, \"-\", \".\");" },
        { "trigger": "replace \t \\\\ to \\\\\\\\", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}replace(${1:string}, \"\\\\\\\", \"\\\\\\\\\\\\\\\");" },

    // STRING OPTIONS
        { "trigger": "join \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}join(${1:list}, \"${2:separator}\");" },
        { "trigger": "split \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}split(${1:string}, \"${2:sumbol}\");" },
        { "trigger": "strip \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}strip(${1:string});" },
        { "trigger": "leftStrip \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}leftStrip(${1:string} [, ${2:characters} ] );" },
        { "trigger": "rightStrip \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}rightStrip(${1:string} [, ${2:characters} ] );" },
        { "trigger": "hash \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}hash(${1:string});" },
        { "trigger": "ordinal \ttext", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:text\\.)/}ordinal(${1:string});" },

    // LIST
        { "trigger": "append \tlist", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:list\\.)/}append(${1:the_list}, ${2:string});" },


// TRAVERCE
        { "trigger": "_trav\t rel_proc_parent", "contents": "rel_services := search(in ${1:da_node} traverse DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:ProcessList \n\t\t\t\t\t   $0traverse List:List:Member:DiscoveredProcess where pid = %pproc_pid%);" },
        { "trigger": "_trav\t ContainedSoftware::SoftwareInstance", "contents": "app_si := search(in app_sc traverse ContainedSoftware:SoftwareContainment:SoftwareContainer:SoftwareInstance);" },
        { "trigger": "_trav\t InferredElement::DiscoveredProcess", "contents": "procs := search(in si traverse InferredElement:Inference:Primary:DiscoveredProcess);" },
        { "trigger": "_trav\t Host:HostedSoftware::SoftwareInstance", "contents": "some_si := search(in host traverse Host:HostedSoftware:RunningSoftware:SoftwareInstance\n\t\t\t\t  where ${1:type} = \"${2:type_here}\");" },
        { "trigger": "_trav\t ContainedSoftware::SoftwareInstance", "contents": "obsolete_links := search(in ${1:related_si} traverse ContainedSoftware:SoftwareContainment:SoftwareContainer:SoftwareInstance\n\t\t\t\t\t\t where type = %${2:si_type}% and key <> %key%\n\t\t\t\t\t\t step in SoftwareContainer:SoftwareContainment\n\t\t\t\t\t\t where #:ContainedSoftware:SoftwareInstance.key = %${3:related_si}.key%);" },
        { "trigger": "_trav\t Client::SoftwareInstance", "contents": "srv_si_list := search(in ${1:related_si} traverse Client:Communication:Server:SoftwareInstance where type = \"${2:type_here}\");" },
        { "trigger": "_trav\t Server::SoftwareInstance", "contents": "client_si_list := search(in ${1:related_si} traverse Server:Communication:Client:SoftwareInstance where type = \"${2:type_here}\");" },
        { "trigger": "_trav\t ContainedSoftware::BusinessApplicationInstance", "contents": "bai_candidates := search(in ${1:related_si} traverse ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance where type = \"%${2:si_type}%\");" },
        { "trigger": "_trav\t Host::SoftwareInstance", "contents": "was_si := search(in host traverse Host:HostedSoftware:RunningSoftware:SoftwareInstance where install_root has substring %${1:substring}% and type = \"${2:type_here}\" );" },
        { "trigger": "_trav\t ElementWithDetail::Detail", "contents": "existing_dts := search(in si traverse ElementWithDetail:Detail:Detail:Detail where ${1:type} = \"${2:type_here}\");" },
        { "trigger": "_trav\t Host::SoftwareInstance", "contents": "db2_si := search(in host traverse Host:HostedSoftware:RunningSoftware:SoftwareInstance where type = \"${1:type_here}\" traverse ElementWithDetail:Detail:Detail:DatabaseDetail where instance has subword '%${2:subword}%');" },
        { "trigger": "_trav\t Dependant::SoftwareInstance", "contents": "mains_si := search(in ${1:related_si} traverse Dependant:Dependency:DependedUpon:SoftwareInstance);" },
        { "trigger": "_trav\t Client::Server:SoftwareInstance", "contents": "main_db_sis := search(in ${1:related_si} traverse Client:Communication:Server:SoftwareInstance);" },


// OTHER - DIFFERENT

    // LOG USUAL
        { "trigger": "debug \tlog", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}debug(\"${1:message}\");" },
        { "trigger": "info \tlog", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}info(\"${1:message}\");" },
        { "trigger": "warn \tlog", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}warn(\"${1:message}\");" },
        { "trigger": "error \tlog", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}error(\"${1:message}\");" },
        { "trigger": "critical \tlog", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}critical(\"${1:message}\");" },

    // LOG CUSTOM
        { "trigger": "_debug \tline", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:line)/}:$TM_LINE_NUMBER" },
        { "trigger": "_debug \tsimple", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}debug(\"DEBUG_RUN: -----------> ${1:message} on line:$TM_LINE_NUMBER\");" },
        { "trigger": "_debug \t%variable%", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}debug(\"DEBUG_RUN: -----------> ${1:message} %${2:variable}% - ${4:message} on line:$TM_LINE_NUMBER\");" },
        { "trigger": "_debug \t%node.attrs%", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}debug(\"DEBUG_RUN: -----------> ${1:message} %${2:host}.${3:name}% - ${4:message} on line:$TM_LINE_NUMBER\");" },
        { "trigger": "_debug \t%node.attrs% Exec", "contents": "delta_time_tics := time.toTicks(time.current()) - time.toTicks(start_time);\n${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}debug(\"DEBUG_RUN: -----------> ${1:message} %${2:host}.${3:name}% - ${4:message} on line:$TM_LINE_NUMBER Execution time:\" + number.toText(delta_time_tics/10000) + \"ms\");" },

    // LOG SI
        { "trigger": "_info \tlog SI", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:log\\.)/}info(\"%host.name%: SI created for %${1:si_type}%);" },

    // EXTRACTIONS REGEX
        { "trigger": "regex \textract Var", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:regex\\.)/}extract(${1:variable}, regex \"${2:regex_raw}\", raw '\\1');" },
        { "trigger": "regex \textract node.attrs", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:regex\\.)/}extract(${1:node}.${2:attrs}, regex \"${3:regex_raw}\", raw '\\1');" },
        { "trigger": "regex \textract raw 1,2", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:regex\\.)/}extract(${1:variable}, regex \"${2:regex_raw}\", raw '\\\\${3:1}', raw '\\\\${4:2}');" },

    // EXTRACTIONS Xpath
        { "trigger": "xpath \tevaluate", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:xpath\\.)/}evaluate(${1:some_file_path}, \"${2:xpath_string}\");" },
        { "trigger": "xpath \topenDocument", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:xpath\\.)/}openDocument(${1:some_file_path});" },
        { "trigger": "xpath \tcloseDocument", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:xpath\\.)/}closeDocument(${1:some_file_path});" },

    // CONTAINERS
        { "trigger": "detailContainer \t_related", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:related\\.)/}detailContainer(${1:node});" },
        { "trigger": "hostingNode \t_related", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:related\\.)/}hostingNode(\"${1:Cluster}\", type := \"${2:SQL Server}\", properties := ${3:required_properties});" },
        { "trigger": "_related_host  \t_related", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:related\\.)/}host(${1:node});" },

    // SIMPLE IDENTIFIERS:
        { "trigger": "_regex \tSimple Identifiers", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:regex )/}\"${1:regex}\" -> \"${2:product_name}\";" },
        { "trigger": "_windows_cmd \tSimple Identifiers", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:windows_cmd )/}\"${1:windows_cmd}\" -> \"${2:product_name}\";" },
        { "trigger": "_unix_cmd \tSimple Identifiers", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:unix_cmd )/}\"${1:unix_cmd}\" -> \"${2:product_name}\";" },

    // IF OS_CLASS:
        { "trigger": "_os_class \thost.os_class", "contents": "if host.os_class = \"Windows\" then\n\tsep := '\\\\\\';\nelse\n\tsep := '/';\nend if;\n" }

    ]
}
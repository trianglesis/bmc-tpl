scopeName: source.model.tplpre
name: model
fileTypes:
  - model
firstLineMatch: .
patterns:
  - include: '#keywords_attributes'
  - include: '#traverse'
  - include: '#all_keys'
  - include: '#errors'
  - include: '#lines'
repository:
  keywords_attrs:
    comment: Changed disabled to 1 to turn off DEV highlighting.
    disabled: 0
    match: >-
      (\")(key_group|key|name|type|version|short_name|install_root|listening_ports|product_version|full_version)(\")
    captures:
      '1':
        name: keyword.control.model
      '2':
        name: storage.type.model
      '3':
        name: keyword.control.model
  keywords_attributes:
    patterns:
      - include: '#keywords_attrs'
  regex_token_s_quote:
    comment: Catch regex in single quotes
    begin: (regex)\s+?(?=')(.+?)
    beginCaptures:
      '1':
        name: keyword.control.model
      '2':
        name: support.function.model
    end: (')
    endCaptures:
      '1':
        name: support.function.model
    patterns:
      - include: '#regular_expressions'
  regex_token_d_quote:
    comment: Catch regex in double qoutes
    begin: (regex)\s+?(?=")(.+?)
    beginCaptures:
      '1':
        name: keyword.control.model
      '2':
        name: support.function.model
    end: (")
    endCaptures:
      '1':
        name: support.function.model
    patterns:
      - include: '#regular_expressions'
  regexes:
    patterns:
      - include: '#regex_token_s_quote'
      - include: '#regex_token_d_quote'
  comment_line:
    name: comment.line.model
    match: (?<!\'|"|\(|\w)(//).*\n
  comment_TODO_line:
    comment: variable.parameter.model
    begin: '(//)\s?(TO(\s+|)DO\:)'
    beginCaptures:
      '1':
        name: comment.line.model
      '2':
        name: keyword.control.model
    end: (.*)
    endCaptures:
      '1':
        name: variable.parameter.function.model
  qouted_line:
    match: '(?<!'')('')([^'']*)((''))(?!'')'
    comment: Still cannot match string like with empty or double quotes
    captures:
      '1':
        name: keyword.control.model
      '2':
        name: string.quoted.single.model
      '4':
        name: keyword.control.model
  qouted_line_empty:
    match: (?<!')(')(('))(?!')
    comment: Still cannot match string like with empty or double quotes
    captures:
      '1':
        name: punctuation.definition.string.begin.model
      '2':
        name: punctuation.definition.string.end.model
      '3':
        name: meta.empty-string.single.model
  double_qouted_line:
    match: '(\"((?:[^\"]|\\\\|\\")*)\")'
    comment: Still cannot match string like with empty or single quotes
    captures:
      '1':
        name: keyword.control.model
      '2':
        name: string.quoted.single.model
  percent_line:
    comment: >-
      I got a problem here. two %% in one string - break coloring. This should
      use some more logic.
    match: '(\%((?:[^\%]|\\\\|\\%)*)\%)'
    name: keyword.control.model
    captures:
      '1':
        name: keyword.control.model
      '2':
        name: string.quoted.single.model
  square_brackets_line_empty:
    match: '(?<!\[)(\[)((\]))(?!\])'
    comment: Still cannot match string like with empty or double quotes
    captures:
      '1':
        name: punctuation.definition.string.begin.model
      '2':
        name: punctuation.definition.string.end.model
      '3':
        name: meta.empty-string.single.model
  square_brackets_line_int:
    match: '\[(-?\d+)\]'
    captures:
      '1':
        name: constant.numeric.model
  square_brackets_line_word:
    match: '\[(\w*?[^\d+?])\]'
    captures:
      '1':
        name: variable.parameter.model
  lines:
    patterns:
      - include: '#qouted_line'
      - include: '#qouted_line_empty'
      - include: '#double_qouted_line'
      - include: '#sql_query'
      - include: '#percent_line'
      - include: '#comment_TODO_line'
      - include: '#comment_line'
      - include: '#regexes'
      - include: '#square_brackets_line_empty'
      - include: '#square_brackets_line_word'
      - include: '#square_brackets_line_int'
      - include: '#all_keys'
  none_attr:
    match: \b(None)
    captures:
      '1':
        name: invalid.illegal.model
  hash_attr:
    match: '(#)\s+"(\S+)":\s+(None)'
    captures:
      '1':
        name: invalid.illegal.model
      '2':
        name: keyword.control.model
      '3':
        name: invalid.illegal.model
  errors:
    patterns:
      - include: '#none_attr'
      - include: '#hash_attr'
  plus:
    match: \+
    name: keyword.operator.assignment.model
  var_assign:
    match: '\:\='
    name: keyword.operator.assignment.model
  double_q:
    match: '(\"\"){1}'
    name: comment.model
  single_q:
    match: '(\''\''){1}'
    name: comment.model
  equal:
    match: \=
    name: keyword.operator.assignment.model
  less:
    match: \<
    name: keyword.operator.model
  more:
    match: \>
    name: keyword.operator.model
  more_equal:
    match: \>\=
    name: keyword.operator.model
  less_equal:
    match: \<\=
    name: keyword.operator.model
  decimal:
    match: \s\-\d+\s
    name: constant.numeric.integer.model
  minus_decimal:
    match: \s\-\d+\s
    name: constant.numeric.integer.model
  just_do:
    match: (\.)
    name: punctuation.accessor.model
    captures:
      '1':
        name: keyword.operator.model
  all_keys:
    patterns:
      - include: '#var_assign'
      - include: '#equal'
      - include: '#less'
      - include: '#more'
      - include: '#more_equal'
      - include: '#less_equal'
      - include: '#plus'
      - include: '#decimal'
      - include: '#minus_decimal'
      - include: '#just_do'
  traverse:
    match: '\"(\#(?:(\w+)(:|\.))+(\w+))\"\:\s\['
    captures:
      '1':
        name: entity.name.function.model
      '2':
        name: variable.parameter.model
      '4':
        name: keyword.control.model

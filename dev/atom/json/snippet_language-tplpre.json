{
	".source.tplpre": {
		"_Copyright BMC Copyright": {
			"prefix": "_Copyright_BMC_Copyright_",
			"body": "// INFO: Add current year!\n// (c) Copyright 2019 BMC Software, Inc. All rights reserved.$0",
			"description": "Copyright info",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/The+Pattern+Language+TPL"
		},
		"_tpl": {
			"prefix": "_tpl",
			"body": "tpl \\$\\$TPLVERSION\\$\\$ module ${1:Module}.${2:Name};$0",
			"description": "Dev option. Header for TPLPreprocessor"
		},
		"_pattern": {
			"prefix": "_pattern",
			"description": "Pattern block template",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Pattern+Overview",
			"body": "\n\npattern ${1:PatternName} 1.0\n\n\t\"\"\"\n\tPattern trigger on ...\n\tPattern also tries to ...\n\n\tSupported platforms:\n\n\tUNIX\n\tWindows\n\n\t\"\"\"\n\n\tmetadata\n\t\tproducts := '';\n\t\turls := '';\n\t\tpublishers  := '';\n\t\tcategories := '';\n\t\tknown_versions := '', '', '';\n\tend metadata;\n\n\toverview\n\t\ttags TKU, TKU_YYYY_MM_DD, Name, Product;\n\tend overview;\n\n\tconstants\n\t\tsi_type := 'Product Name';\n\tend constants;\n\n\ttriggers\n\t\ton process := DiscoveredProcess where cmd matches unix_cmd \"CMD\" and args matches regex \"ARGS\";\n\tend triggers;\n\n\tbody\n\t\thost := model.host(process);\n\n\n\tend body;\nend pattern;\n\n$0"
		},
		"from SearchFunctions": {
			"prefix": "from_SearchFunctions_",
			"body": "// INFO: Check the latest version!\nfrom SearchFunctions import SearchFunctions ${1:1}.${2:0};$0"
		},
		"from RDBMSFunctions": {
			"prefix": "from_RDBMSFunctions_",
			"body": "// INFO: Check the latest version!\nfrom RDBMSFunctions import RDBMSFunctions ${1:1}.${2:0};$0"
		},
		"from DiscoveryFunctions": {
			"prefix": "from_DiscoveryFunctions_",
			"body": "// INFO: Check the latest version!\nfrom DiscoveryFunctions import DiscoveryFunctions ${1:1}.${2:0};$0"
		},
		"from ConversionFunctions": {
			"prefix": "from_ConversionFunctions_",
			"body": "// INFO: Check the latest version!\nfrom ConversionFunctions import ConversionFunctions ${1:1}.${2:0};$0"
		},
		"import Future": {
			"prefix": "from_System_Future",
			"body": "// INFO: Check the latest version!\nfrom System import Future ${1:1}.${2:0};$0"
		},
		"metadata pattern": {
			"prefix": "_metadata_pattern",
			"description": "Metadata in pattern body block template",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Pattern+Overview",
			"body": "    metadata\n        products := \"\";\n        urls := \"\";\n        publishers  := \"\";\n        categories := \"\";\n        known_versions := \"\", \"\", \"\", \"\", \"\";\n    end metadata;\n$0"
		},
		"metadata module": {
			"prefix": "_metadata_module",
			"description": "Metadata in module block template",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Pattern+Overview",
			"body": "metadata\n\torigin := \"TKU\";\n\ttkn_name := \"${1:name}\";\n\ttree_path := '${2:category}', '${3:category}', '${4:category}';\nend metadata;\n$0"
		},
		"_triggers unix_cmd": {
			"prefix": "_triggers_unix_cmd_",
			"description": "Triggers define the conditions in which the body of the pattern are evaluated.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Triggers",
			"body": "triggers\n    on process := DiscoveredProcess where cmd matches unix_cmd \"${1:name}\";\nend triggers;\n$0"
		},
		"_triggers windows_cmd": {
			"prefix": "_triggers_windows_cmd_",
			"description": "Triggers define the conditions in which the body of the pattern are evaluated.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Triggers",
			"body": "triggers\n    on process := DiscoveredProcess where cmd matches windows_cmd \"${1:name}\";\nend triggers;\n$0"
		},
		"_triggers host": {
			"prefix": "_triggers_host_",
			"description": "Triggers define the conditions in which the body of the pattern are evaluated.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Triggers",
			"body": "triggers\n    on Host created, confirmed where ${1:name};\nend triggers;\n$0"
		},
		"_triggers hardware_detail": {
			"prefix": "_triggers_hardware_detail_",
			"description": "Triggers define the conditions in which the body of the pattern are evaluated.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Triggers",
			"body": "triggers\n    on detail := HardwareDetail created, confirmed\n        where ${1:name};\nend triggers;\n$0"
		},
		"_triggers management_controller": {
			"prefix": "_triggers_management_controller_",
			"description": "Triggers define the conditions in which the body of the pattern are evaluated.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Triggers",
			"body": "triggers\n    on mc := ManagementController created, confirmed\n        where ${1:name};\nend triggers;\n$0"
		},
		"_triggers network_device": {
			"prefix": "_triggers_network_device_",
			"description": "Triggers define the conditions in which the body of the pattern are evaluated.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Triggers",
			"body": "triggers\n    on device := NetworkDevice created, confirmed\n        where ${1:vendor};\nend triggers;\n$0"
		},
		"_triggers software_instance": {
			"prefix": "_triggers_software_instance_",
			"description": "Triggers define the conditions in which the body of the pattern are evaluated.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Triggers",
			"body": "triggers\n    on SoftwareInstance created, confirmed\n                  where type = ${1:name};\nend triggers;\n$0"
		},
		"_triggers software_component": {
			"prefix": "_triggers_software_component_",
			"description": "Triggers define the conditions in which the body of the pattern are evaluated.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Triggers",
			"body": "triggers\n    on SoftwareComponent created, confirmed\n                   where instance = ${1:name};\nend triggers;\n$0"
		},
		"_identify Simple Identifiers": {
			"prefix": "_identify_Simple_Identifiers_",
			"description": "Identify tables are active tables used to annotate matching nodes with particular values.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Identify",
			"body": "identify ${1:SOME} 1.0\n\ttags simple_identity, ${2:tag1};\n\tDiscoveredProcess cmd -> simple_identity;\nend identify;\n$0"
		},
		"_table Two cols": {
			"prefix": "_table_Two_cols_",
			"description": "Tables provide simple look-up tables that can be used by functions in pattern bodies.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Static+Tables",
			"body": "table ${1:table_name} 1.0\n\t\"one\" -> \"val_name1\", \"val_name2\";\n\t\"two\"    -> \"val_name3\", \"val_name4\";\n\tdefault  -> \"val_name5\", \"val_name6\";\nend table;\n$0"
		},
		"_table One col": {
			"prefix": "_table_One_col_",
			"description": "Tables provide simple look-up tables that can be used by functions in pattern bodies.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Static+Tables",
			"body": "table ${1:table_name} 1.0\n\t\"one\"       -> val_1;\n\t\"two\"       -> val_2;\n\tdefault     -> val_100;\nend table;\n$0"
		},
		"_definitions Small": {
			"prefix": "_definitions_Small_",
			"description": "Additional functions to call in patterns are described in definitions blocks. In TPL 1.5, definitions blocks are used for User defined functions and for data integration with SQL databases.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Definitions",
			"body": "definitions ${1:def_name} 1.0\n\t'''${2:Describe definitions}'''$0\n\nend definitions;\n$0"
		},
		"_definitions Big": {
			"prefix": "_definitions_Big_",
			"description": "Additional functions to call in patterns are described in definitions blocks. In TPL 1.5, definitions blocks are used for User defined functions and for data integration with SQL databases.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Definitions",
			"body": "definitions ${1:def_name} 1.0\n\t'''${2:Describe definitions}\n\t   Change History:\n\n\t'''\n\t$0\n\nend definitions;\n$0"
		},
		"_define Function": {
			"prefix": "_define_Function_",
			"description": "User defined functions are specified in definitions blocks. In order to specify a function the type parameter within the definitions block must be set to the value function or omitted.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "define ${1:function_name}(${2:argument}) -> ${3:return}\n\t'''\n\t${4:Describe function}\n\t'''\n\n\t$0\n\n\treturn ${5:dummy};\n\nend define;\n$0"
		},
		"_full_version (\\\\d*\\\\.\\\\d*)": {
			"prefix": "_full_version_(\\\\d*\\\\.\\\\d*)_",
			"description": "Template for product version extract when full version is obtained.",
			"body": "// Assign product version\nif full_version then\n\tproduct_version := regex.extract(full_version, regex '(\\\\d*\\\\.\\\\d*)', raw '\\\\1');\n\tif not product_version then\n\t\tproduct_version := full_version;\n\tend if;\nend if;\n\n$0"
		},
		"_packages Find packages": {
			"prefix": "_packages_Find_packages_",
			"description": "Template for find packages and get full version.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.findPackages",
			"body": "packages := model.findPackages( host, [regex \"${1:PACKAGE_NAME}\"] );\nfor package in packages do\n\tif package.version then\n\t\tfull_version := package.version;\n\t\tbreak;\n\tend if;\nend for;$0"
		},
		"OLD functions.validate_host_address_format(rel_host_address)": {
			"prefix": "_functions.validate_host_address_format",
			"description": "OLD Common_functions module. If <rel_host_address> does not meet requirements(regex '^[da-z:][w:.-]*$') then functions returns empty string",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions.getNodeIp)\nfunctions.validate_host_address_format(${1:rel_host_address});$0"
		},
		"OLD functions.domain_lookup(host, rel_host_address_domain)": {
			"prefix": "_functions.domain_lookup",
			"description": "OLD Common_functions module. Function resolves domain to IP address using \"nslookup\" command",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.domain_lookup(${1:host}, ${2:rel_host_address_domain});$0"
		},
		"OLD functions.identify_host_perform_search(host, rel_host_address)": {
			"prefix": "_functions.identify_host_perform_search",
			"description": "OLD Common_functions module. Function searches for one \"rel_host_address\" Host",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions.getHostingNodes)\nfunctions.identify_host_perform_search(${1:host}, ${2:rel_host_address});$0"
		},
		"OLD functions.identify_host_perform_search_in_scope(host, rel_host_address, hosts_scope)": {
			"prefix": "_functions.identify_host_perform_search_in_scope",
			"description": "OLD Common_functions module. Function searches for one rel_host_address Host in some narrowed scope of hosts, but not on all available hosts like identify_host_perform_search()",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.identify_host_perform_search_in_scope(${1:host}, ${2:rel_host_address}, ${3:hosts_scope});$0"
		},
		"OLD functions.identify_host(host, rel_host_address, extended)": {
			"prefix": "_functions.identify_host",
			"description": "OLD Common_functions module. Function searches for one \"rel_host_address\" Host",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.identify_host(${1:host}, ${2:rel_host_address}, ${3:extended});$0"
		},
		"OLD functions.identify_host_extended(host, rel_host_address, extended)": {
			"prefix": "_functions.identify_host_extended",
			"description": "OLD Common_functions module. Function searches for one \"rel_host_address\" Host",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.identify_host_extended(${1:host}, ${2:rel_host_address}, ${3:extended});$0"
		},
		"OLD functions.related_sis_search(host, rel_host_address, rel_si_type)": {
			"prefix": "_functions.related_sis_search",
			"description": "OLD Common_functions module. Function searches for all SIs with \"rel_si_type\" TYPE on \"rel_host_address\" host",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.related_sis_search(${1:host}, ${2:rel_host_address}, ${3:rel_si_type});$0"
		},
		"OLD functions.related_sis_search_on_multiple_hosts(host, rel_host_addresses, rel_si_type)": {
			"prefix": "_functions.related_sis_search_on_multiple_hosts",
			"description": "OLD Common_functions module. Function searches for all SIs with \"rel_si_type\" TYPE on multiple \"rel_host_addresses\" hosts.",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.related_sis_search_on_multiple_hosts(${1:host}, ${2:rel_host_addresses}, ${3:rel_si_type});$0"
		},
		"OLD functions.related_sis_search_on_multiple_hosts_extended(host, rel_host_addresses, rel_si_type)": {
			"prefix": "_functions.related_sis_search_on_multiple_hosts_extended",
			"description": "OLD Common_functions module. Function searches for all SIs with \"rel_si_type\" TYPE on multiple \"rel_host_addresses\" hosts.",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.related_sis_search_on_multiple_hosts_extended(${1:host}, ${2:rel_host_addresses}, ${3:rel_si_type});$0"
		},
		"OLD functions.related_sis_search_extended(host, rel_host_address, rel_si_type, extended)": {
			"prefix": "_functions.related_sis_search_extended",
			"description": "OLD Common_functions module. Function searches for all SIs with \"rel_si_type\" TYPE on \"rel_host_address\" host.",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.related_sis_search_extended(${1:host}, ${2:rel_host_address}, ${3:rel_si_type}, ${4:extended}),$0"
		},
		"OLD functions.related_si_types_search(host, rel_host_address, rel_si_types)": {
			"prefix": "_functions.related_si_types_search",
			"description": "OLD Common_functions module. Function searches for all SIs with different TYPEs in \"rel_si_types\" LIST on \"rel_host_address\" host",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.related_si_types_search(${1:host}, ${2:rel_host_address}, ${3:rel_si_types});$0"
		},
		"OLD functions.path_normalization(host, install_root)": {
			"prefix": "_functions.path_normalization",
			"description": "OLD Common_functions module. Current function determines \"~\" in the path, normalizes it and returns back full path",
			"body": "// WARNING: This is an old implementation, please use new (New.New)\nfunctions.path_normalization(${1:host}, ${2:install_root});$0"
		},
		"OLD functions.links_management(si_node, recently_found_sis, related_si_type)": {
			"prefix": "_functions.links_management",
			"description": "OLD Common_functions module. Function that manages Communication and Dependency links between the current SI and related SIs",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.links_management(${1:si_node}, ${2:recently_found_sis}, ${3:related_si_type});$0"
		},
		"OLD functions.get_cleanedup_path(path, os)": {
			"prefix": "_functions.get_cleanedup_path",
			"description": "OLD Common_functions module. Function which normalizes directory path by removing \".\", \"..\", etc.",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.get_cleanedup_path(${1:path}, ${2:os});$0"
		},
		"OLD functions.get_max_version(ver1, ver2)": {
			"prefix": "_functions.get_max_version",
			"description": "OLD Common_functions module. Compares to version strings like \"10.08.10\" and \"7.18\" and returns the biggest one",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.get_max_version(${1:ver1}, ${2:ver2});$0"
		},
		"OLD functions.get_exe_cwd_path(process, expected_binary_name)": {
			"prefix": "_functions.get_exe_cwd_path",
			"description": "OLD Common_functions module. Function tries to obtain: - full process command path (exe_path) and/or - current working directory (cwd_path) - directory the process was started from. ",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.get_exe_cwd_path(${1:process}, ${2:expected_binary_name});$0"
		},
		"OLD functions.sort_list(list)": {
			"prefix": "_functions.sort_list",
			"description": "OLD Common_functions module. Function returns sorted list of strings ",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.sort_list(${1:list});$0"
		},
		"OLD functions.run_priv_cmd(host, command, priv_cmd := 'PRIV_RUNCMD')": {
			"prefix": "_functions.run_priv_cmd",
			"description": "OLD Common_functions module. Run the given command, using privilege elevation on UNIX, if required. The command is first run as given. If this fails, produces no output and the platform is UNIX then the command is executed again using the given priv_cmd. ",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.run_priv_cmd(${1:host}, ${2:command}, priv_cmd := 'PRIV_RUNCMD');$0"
		},
		"OLD functions.has_process(host, command)": {
			"prefix": "_functions.has_process",
			"description": "OLD Common_functions module. Returns true if the given process is running on the given host. ",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.has_process(${1:host}, ${2:command});$0"
		},
		"OLD functions.isValidSerialNumber(serial)": {
			"prefix": "_functions.isValidSerialNumber",
			"description": "OLD Common_functions module. Returns true if the given serial number is valid ",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.isValidSerialNumber(${1:serial});$0"
		},
		"OLD functions.convertToCharString(ascii_codes)": {
			"prefix": "_functions.convertToCharString",
			"description": "OLD Common_functions module. Converts list of ASCII code integers into a string of characters. ",
			"body": "// WARNING: This is an old implementation, please use new (ConversionFunctions)\nfunctions.convertToCharString(${1:ascii_codes});$0"
		},
		"OLD functions.wmiFollowAssociations(host, namespace, initial_paths, associations)": {
			"prefix": "_functions.wmiFollowAssociations",
			"description": "OLD Common_functions module. Starting from initial_paths, a list of WMI source instance paths, follows multiple WMI associations to reach a set of target instances. ",
			"body": "// WARNING: This is an old implementation, please use new (ConversionFunctions)\nfunctions.wmiFollowAssociations(${1:host}, ${2:namespace}, ${3:initial_paths}, ${4:associations});$0"
		},
		"OLD functions.checkForDecimal(value, bValue)": {
			"prefix": "_functions.checkForDecimal",
			"description": "OLD Common_functions module. Check for decimal and convert the value into Bytes ",
			"body": "// WARNING: This is an old implementation, please use new (ConversionFunctions)\nfunctions.checkForDecimal(${1:value}, ${2:bValue});$0"
		},
		"OLD functions.convertToBytes(value, gib)": {
			"prefix": "_functions.convertToBytes",
			"description": "OLD Common_functions module. Convert the value into Bytes ",
			"body": "// WARNING: This is an old implementation, please use new (ConversionFunctions)\nfunctions.convertToBytes(${1:value}, ${2:gib});$0"
		},
		"OLD functions.identify_host_with_uuid(uuid)": {
			"prefix": "_functions.identify_host_with_uuid",
			"description": "OLD Common_functions module. Function returns host with searched UUID ",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)\nfunctions.identify_host_with_uuid(${1:uuid});$0"
		},
		"OLD functions.locateCommands(host, command_list)": {
			"prefix": "_functions.locateCommands",
			"description": "OLD Common_functions module. Attempts to locate the required commands. Returns a table of each command location.\nThe location is none if the command could not be found. This call returns none if the location process fails.",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.locateCommands(${1:host}, ${2:command_list});$0"
		},
		"OLD functions.find_server(host, server_address, port, si_type, alt_types := none, all := false)": {
			"prefix": "_functions.find_server",
			"description": "OLD Common_functions module. Function that searches for the appropriate server node based on the provided server details. ",
			"body": "// WARNING: This is an old implementation, please use new (SearchFunctions)!\nfunctions.find_server(${1:host}, ${2:server_address}, ${3:port}, ${4:si_type}, alt_types := ${5:none}, all := ${6:false});$0"
		},
		"OLD functions.checkCommandList(host, command_list)": {
			"prefix": "_functions.checkCommandList",
			"description": "OLD Common_functions module. Checks whether the commands exist. Returns true if all the commands exist. Even one command we are looking for is not present we return false. ",
			"body": "// WARNING: This is an old implementation, please use new (DiscoveryFunctions)\nfunctions.checkCommandList(${1:host}, ${2:command_list});$0"
		},
		"ConversionFunctions.isValidSerialNumber(serial) -> valid": {
			"prefix": "ConversionFunctions.isValidSerialNumber",
			"description": "SupportingFiles ConversionFunctions module -> isValidSerialNumber() - checks if the provided serial number is valid;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "ConversionFunctions.isValidSerialNumber(${1:serial});$0"
		},
		"isValidSerialNumber(serial) -> valid": {
			"prefix": "isValidSerialNumber",
			"description": "SupportingFiles ConversionFunctions module -> isValidSerialNumber() - checks if the provided serial number is valid;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "ConversionFunctions.isValidSerialNumber(${1:serial});$0"
		},
		"ConversionFunctions.convertToCharString(ascii_codes) -> ascii_string": {
			"prefix": "ConversionFunctions.convertToCharString",
			"description": "SupportingFiles ConversionFunctions module -> convertToCharString() - converts list of ASCII code integers into a string of characters;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "ConversionFunctions.convertToCharString(${1:ascii_codes});$0"
		},
		"convertToCharString(ascii_codes) -> ascii_string": {
			"prefix": "convertToCharString",
			"description": "SupportingFiles ConversionFunctions module -> convertToCharString() - converts list of ASCII code integers into a string of characters;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "ConversionFunctions.convertToCharString(${1:ascii_codes});$0"
		},
		"ConversionFunctions.convertToBytes(value, gib) -> result": {
			"prefix": "ConversionFunctions.convertToBytes",
			"description": "SupportingFiles ConversionFunctions module -> convertToBytes() - converts the value into Bytes;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "ConversionFunctions.convertToBytes(${1:value}, gib);$0"
		},
		"convertToBytes(value, gib) -> result": {
			"prefix": "convertToBytes",
			"description": "SupportingFiles ConversionFunctions module -> convertToBytes() - converts the value into Bytes;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "ConversionFunctions.convertToBytes(${1:value}, gib);$0"
		},
		"ConversionFunctions.convertStringToHex(string, sep := \"\") -> result": {
			"prefix": "ConversionFunctions.convertStringToHex",
			"description": "SupportingFiles ConversionFunctions module -> convertStringToHex() - converts String To HexaDecimal string;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "ConversionFunctions.convertStringToHex(${1:string}, sep := \"\");$0"
		},
		"convertStringToHex(string, sep := \"\") -> result": {
			"prefix": "convertStringToHex",
			"description": "SupportingFiles ConversionFunctions module -> convertStringToHex() - converts String To HexaDecimal string;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "ConversionFunctions.convertStringToHex(${1:string}, sep := \"\");$0"
		},
		"cluster_support_functions.getHostingNode(host, fallback_kind := Host, instance := inst, clustered_data_path := path)": {
			"prefix": "cluster_support_functions.getHostingNode",
			"description": "SI can be identified as clustered (running on cluster):\n- if SI has specific processes/commands that indicates clustered installation\n- if SI is managed/monitored by ClusterService. Usually SI's instance or paths can be found in ClusterService information.\n- if SI binary or data directory resides on file system managed by Cluster\n- if SI is listening on IP address which is managed by Cluster",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "cluster_support_functions.getHostingNode(host, fallback_kind := \"${1:t_host}\", instance := \"${2:inst}\", clustered_data_path := \"${3:path}\");$0"
		},
		"cluster_support_functions.add_resource_attrs(resource, resource_type, resource_properties, resource_mapping)": {
			"prefix": "cluster_support_functions.add_resource_attrs",
			"description": "Add resource attributes of interest to the cluster resource node along with a standardised resource type attribute.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "cluster_support_functions.add_resource_attrs(${1:resource}, ${2:resource_type}, ${3:resource_properties}, ${4:resource_mapping});$0"
		},
		"cluster_support_functions.get_cluster_dns_names(cluster, ipv4_addrs, ipv6_addrs, host:=none)": {
			"prefix": "cluster_support_functions.get_cluster_dns_names",
			"description": "Get DNS names associated with the hosts of a cluster.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "cluster_support_functions.get_cluster_dns_names(${1:cluster}, ${2:ipv4_addrs}, ${3:ipv6_addrs}, host := \"${4:none}\");$0"
		},
		"cluster_support_functions.get_cluster_service_vip(si)": {
			"prefix": "cluster_support_functions.get_cluster_service_vip",
			"description": "Obtain the virtual ip address of the provided SoftwareInstance node if it is related to a ClusterService node. Also return the port if reported.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "cluster_support_functions.get_cluster_service_vip(${1:si});$0"
		},
		"cluster_support_functions.get_si_host(si, ip_addr)": {
			"prefix": "cluster_support_functions.get_si_host",
			"description": "Obtain the host related to the provided SoftwareInstance node.\nIf the SoftwareInstance is related to multiple hosts due to the software running on a cluster,\nthen it selects the host based on the host currently supporting the provided IP address\nor the host known to be actively running the clustered software.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "cluster_support_functions.get_si_host(${1:si}, ${2:ip_addr});$0"
		},
		"discovery.process(node)": {
			"prefix": "discovery.process",
			"description": "Returns the process node corresponding to the source node, which must be a ListeningPort or NetworkConnection node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.process",
			"body": "discovery.process(${1:process});$0"
		},
		"discovery.children(node)": {
			"prefix": "discovery.children",
			"description": "Returns a list of the child processes for the given DiscoveredProcess node. Returns an empty list if there no children or the parameter is not a DiscoveredProcess node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.children",
			"body": "discovery.children(${1:process});$0"
		},
		"discovery.descendents(node)": {
			"prefix": "discovery.descendents",
			"description": "Returns a list consisting of the children of the given DiscoveredProcess node, and recursively all of the children's children.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.descendents",
			"body": "discovery.descendents(${1:process});$0"
		},
		"discovery.parent(node)": {
			"prefix": "discovery.parent",
			"description": "Returns the parent process for the given DiscoveredProcess node. Returns none if the process has no parent.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.parent",
			"body": "discovery.parent(${1:process});$0"
		},
		"discovery.allProcesses(node)": {
			"prefix": "discovery.allProcesses",
			"description": "Returns a list of all processes corresponding to the directly discovered data source node. Returns an empty list if the source node is not a valid directly discovered data node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.allProcesses",
			"body": "discovery.allProcesses(${1:process});$0"
		},
		"discovery.access(node)": {
			"prefix": "discovery.access",
			"description": "Returns the Discovery Access node for the source DDD node, if given. If no node is given, it returns the DiscoveryAccess currently in use.Returns none if the source is not valid.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.access",
			"body": "discovery.access(${1:process});$0"
		},
		"discovery.fileGet(host, config_filepath)": {
			"prefix": "discovery.fileGet",
			"description": "Retrieves the specified file. target is a node used to identify the discovery target, either a directly discovered data node, or a Host node. Requires PRIV_CAT to be defined to retrieve files not readable by the current user.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.fileGet",
			"body": "discovery.fileGet(host, ${1:config_filepath});$0"
		},
		"discovery.fileInfo(host, \"file_path\")": {
			"prefix": "discovery.fileInfo",
			"description": "Retrieves information about the specified file, but not the file content. This is useful if the file is a binary file or particularly large.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.fileInfo",
			"body": "discovery.fileInfo(host, \"${1:file_path}\");$0"
		},
		"discovery.getNames(target, ip_address)": {
			"prefix": "discovery.getNames",
			"description": "Performs a DNS lookup on the IP address and returns a list of FQDN strings.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.getNames",
			"body": "discovery.getNames(${1:target}, ${2:ip_address});$0"
		},
		"discovery.listDirectory(host, directory)": {
			"prefix": "discovery.listDirectory",
			"description": "Retrieves the directory listing of the directory specified by the path on the specified target. You cannot use wildcards in the path.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.listDirectory",
			"body": "discovery.listDirectory(host, ${1:directory});$0"
		},
		"discovery.listRegistry(host, registry_root)": {
			"prefix": "discovery.listRegistry",
			"description": "Returns a list of the registry entries of the registry key specified by the key_path.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.listRegistry",
			"body": "discovery.listRegistry(host, ${1:registry_root});$0"
		},
		"discovery.registryKey(host, reg_key_inst_dir)": {
			"prefix": "discovery.registryKey",
			"description": "Retrieves a registry key from a Windows computer.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.registryKey",
			"body": "discovery.registryKey(host, ${1:reg_key_inst_dir});$0"
		},
		"discovery.wmiQuery(host, wmiQuery, wmiNS)": {
			"prefix": "discovery.wmiQuery_wmiNS",
			"description": "Performs a WMI query on a Windows computer. Returns a list of DiscoveredWMI nodes.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.wmiQuery",
			"body": "discovery.wmiQuery(host, ${1:wmiQuery}, ${2:wmiNS});$0"
		},
		"discovery.wmiQuery(host, wmiQuery, raw \"path_to\")": {
			"prefix": "discovery.wmiQuery_path_to",
			"description": "Performs a WMI query on a Windows computer. Returns a list of DiscoveredWMI nodes.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.wmiQuery",
			"body": "discovery.wmiQuery(host, ${1:wmiQuery}, raw \"${2:path_to}\");$0"
		},
		"discovery.wbemQuery(target, class_name, [properties], namespace)": {
			"prefix": "discovery.wbemQuery",
			"description": "Performs a WBEM query on the target and returns a list of DiscoveredWBEM DDD nodes.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.wbemQuery",
			"body": "discovery.wbemQuery(${1:target}, ${2:class_name}, [${3:properties}], ${4:namespace});$0"
		},
		"discovery.wbemEnumInstances(target, class_name, properties, namespace, filter_locally)": {
			"prefix": "discovery.wbemEnumInstances",
			"description": "Performs a WBEM query on the target and returns a list of DiscoveredWBEMInstance DDD nodes.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.wbemEnumInstances",
			"body": "discovery.wbemEnumInstances(${1:target}, ${2:class_name}, ${3:properties}, ${4:namespace}, ${5:filter_locally});$0"
		},
		"Future.runCommand(host, \"command_to_run\", \"path_to_command\")": {
			"prefix": "Future.runCommand",
			"description": "FUTURE Returns a DiscoveredCommandResult node containing the result of running the specified command.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Future.runCommand",
			"body": "Future.runCommand(host, \"${1:command}\", \"${2:path_to_command}\");$0"
		},
		"discovery.runCommand(host, \"command_to_run\")": {
			"prefix": "discovery.runCommand",
			"description": "Returns a DiscoveredCommandResult node containing the result of running the specified command.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.runCommand",
			"body": "discovery.runCommand(host, \"${1:command_to_run}\");$0"
		},
		"discovery.snmpGet(target, oid_table, [binary_oid_list])": {
			"prefix": "discovery.snmpGet",
			"description": "Performs an SNMP query on the target and returns a DiscoveredSNMP node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.snmpGet",
			"body": "discovery.snmpGet(${1:target}, ${2:oid_table}, [${3:binary_oid_list}]);$0"
		},
		"discovery.snmpGetTable(target, table_oid, column_table, [binary_oid_list])": {
			"prefix": "discovery.snmpGetTable",
			"description": "Performs an SNMP query that returns a table on the target.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.snmpGetTable",
			"body": "discovery.snmpGetTable(${1:target}, ${2:table_oid}, ${3:column_table}, [${4:binary_oid_list}]);$0"
		},
		"discovery.restfulGet(target, protocol, path[, header])": {
			"prefix": "discovery.restfulGet",
			"description": "Performs a GET request on the target using the RESTful protocol specified and returns a node containing information on the discovered system.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.restfulGet",
			"body": "discovery.restfulGet(${1:target}, ${2:protocol}, ${3:path}[, ${4:header}]);$0"
		},
		"discovery.restfulPost(target, protocol, path, body[, header])": {
			"prefix": "discovery.restfulPost",
			"description": "Performs a POST request on the target using the RESTful system and returns a node containing information on the discovered system.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.restfulPost",
			"body": "discovery.restfulPost(${1:target}, ${2:protocol}, ${3:path}, ${4:body}[, ${5:header}]);$0"
		},
		"discovery.vSphereFindObjects": {
			"prefix": "discovery.vSphereFindObjects",
			"description": "Queries to search from the root folder the instances of an object type and returns the requested properties for each object found.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.vSphereFindObjects",
			"body": "discovery.vSphereFindObjects(${1:vc_host}, \"${2:HostSystem}\", [\"name\", \"hardware.systemInfo.uuid\"]);$0"
		},
		"discovery.vSphereTraverseToObjects": {
			"prefix": "discovery.vSphereTraverseToObjects",
			"description": "Queries to traverse from the initial object to instances of an object type and get properties on those objects.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.vSphereTraverseToObjects",
			"body": "discovery.vSphereTraverseToObjects(${1:host}, \"${2:HostSystem}\", storage_info.storage_id, \"datastore\", \"Datastore\", [\"name\"]);$0"
		},
		"discovery.vSphereGetProperties": {
			"prefix": "discovery.vSphereGetProperties",
			"description": "Queries to retrieve properties from a given MOR and returns the requested properties for each object found.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.vSphereGetProperties",
			"body": "discovery.vSphereGetProperties(${1:host}, \"${2:HostSystem}\", host_id, [\"config.storageDevice.scsiLun[\"%disk_info.key%\"].deviceName\", \"config.storageDevice.scsiLun[\"%disk_info.key%\"].capabilities.updateDisplayNameSupported\"]);$0"
		},
		"discovery.vSphereGetPropertyTable": {
			"prefix": "discovery.vSphereGetPropertyTable",
			"description": "Queries to retrieve a table of values from a given MOR and is intended to be used to retrieve nested properties from lists and arrays.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/discovery.vSphereGetPropertyTable",
			"body": "discovery.vSphereGetPropertyTable(${1:host}, \"${2:HostSystem}\", host_id, \"config.storageDevice.scsiLun\", [\"serialNumber\", \"deviceName\"]);$0"
		},
		"binary.toHexString(value)": {
			"prefix": "binary.toHexString",
			"description": "Returns the given binary value as a hex string, that is, two hex digits per byte.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/binary.toHexString",
			"body": "binary.toHexString(${1:value});$0"
		},
		"binary.toIPv4(value)": {
			"prefix": "binary.toIPv4",
			"description": "Returns the given binary value as the text representation of an IPv4 address.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/binary.toIPv4",
			"body": "binary.toIPv4(${1:value});$0"
		},
		"binary.toIPv4z(value)": {
			"prefix": "binary.toIPv4z",
			"description": "Returns the given binary value as the text representation of an IPv4 address with a zone index.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/binary.toIPv4z",
			"body": "binary.toIPv4z(${1:value});$0"
		},
		"binary.toIPv6(value)": {
			"prefix": "binary.toIPv6",
			"description": "Returns the given binary value as the text representation of a canonical IPv6 address.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/binary.toIPv6",
			"body": "binary.toIPv6(${1:value});$0"
		},
		"binary.toIPv6z(value)": {
			"prefix": "binary.toIPv6z",
			"description": "Returns the given binary value as the text representation of a canonical IPv6 address with zone index.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/binary.toIPv6z",
			"body": "binary.toIPv6z(${1:value});$0"
		},
		"binary.toMACAddress(value)": {
			"prefix": "binary.toMACAddress",
			"description": "Returns the given binary value as the text representation of a MAC address.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/binary.toMACAddress",
			"body": "binary.toMACAddress(${1:value});$0"
		},
		"binary.toValue(data, format)": {
			"prefix": "binary.toValue",
			"description": "Converts the given binary value into the specified format.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/binary.toValue",
			"body": "binary.toValue(${1:data}, ${2:format});$0"
		},
		"binary.toWWN(value)": {
			"prefix": "binary.toWWN",
			"description": "Returns the given binary value as the text representation of a WWN value.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/binary.toWWN",
			"body": "binary.toWWN(${1:value});$0"
		},
		"filepath_info Matrix": {
			"prefix": "filepath_info_Matrix",
			"description": "Development function. Allows us to gather all file get and command run from patterns to show it in docs.",
			"body": "$0// *filepath_info_start\n$0// filepath_windows := \"${1:filepath_windows}\"\n$0// filepath_unix := \"${2:filepath_unix}\"\n$0// reason := \"${3:Obtain something}\"\n$0// when := \"${4:Only if installation is path obtained}\"\n$0// *filepath_info_end$0"
		},
		"command_info Matrix": {
			"prefix": "command_info_Matrix",
			"description": "Development function. Allows us to gather all file get and command run from patterns to show it in docs.",
			"body": "$0// *command_info_start\n$0// command_windows := \"${1:command_windows}\"\n$0// command_unix := \"${2:command_unix}\"\n$0// reason := \"${3:Obtain something}\"\n$0// when := \"${4:Only if installation path is obtained}\"\n$0// *command_info_end$0"
		},
		"filepath_info Unix Matrix": {
			"prefix": "filepath_info_Unix_Matrix",
			"description": "Development function. Allows us to gather all file get and command run from patterns to show it in docs.",
			"body": "$0// *filepath_info_start\n$0// filepath_unix := \"${2:filepath_unix}\"\n$0// reason := \"${3:Obtain something}\"\n$0// when := \"${4:Only if installation is path obtained}\"\n$0// *filepath_info_end$0"
		},
		"command_info Windows Matrix": {
			"prefix": "command_info_Windows_Matrix",
			"description": "Development function. Allows us to gather all file get and command run from patterns to show it in docs.",
			"body": "$0// *command_info_start\n$0// command_windows := \"${1:command_windows}\"\n$0// reason := \"${3:Obtain something}\"\n$0// when := \"${4:Only if installation path is obtained}\"\n$0// *command_info_end$0"
		},
		"json.encode(\"value\")": {
			"prefix": "json.encode",
			"description": "Converts value to a JSON encoded string.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/json.encode",
			"body": "json.encode(${1:value});$0"
		},
		"json.decode(\"value\")": {
			"prefix": "json.decode",
			"description": "Decodes a JSON encoded string and returns a structure containing a string, table or list including nested structures.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/json.decode",
			"body": "json.decode(${1:value});$0"
		},
		"DiscoveryFunctions.escapePath(host, install_root) -> install_root": {
			"prefix": "DiscoveryFunctions.escapePath",
			"description": "DiscoveryFunctions.escapePath() -> escape extra characters and resolve /../ in path.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.escapePath(${1:host}, ${2:install_root});$0"
		},
		"escapePath(host, install_root) -> install_root": {
			"prefix": "escapePath",
			"description": "DiscoveryFunctions.escapePath() -> escape extra characters and resolve /../ in path.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.escapePath(${1:host}, ${2:install_root});$0"
		},
		"DiscoveryFunctions.escapeArg(host, value, permit_env_vars := false) -> escaped": {
			"prefix": "DiscoveryFunctions.escapeArg",
			"description": "DiscoveryFunctions.escapeArg(host, value, permit_env_vars := false) -> escapes an argument for use in a command",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.escapeArg(${1:host}, ${2:value}, ${2:permit_env_vars} := false);$0"
		},
		"escapeArg(host, value, permit_env_vars := false) -> escaped": {
			"prefix": "escapeArg",
			"description": "DiscoveryFunctions.escapeArg(host, value, permit_env_vars := false) -> escapes an argument for use in a command",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.escapeArg(${1:host}, ${2:value}, ${2:permit_env_vars} := false);$0"
		},
		"DiscoveryFunctions.pathNormalization(host, install_root) -> install_root // deprecated": {
			"prefix": "DiscoveryFunctions.pathNormalization",
			"description": "deprecated synonym for expandWindowsPath",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "// deprecated synonym for expandWindowsPath\nDiscoveryFunctions.pathNormalization(${1:host}, ${2:install_root});$0 // deprecated"
		},
		"pathNormalization(host, install_root) -> install_root // deprecated": {
			"prefix": "pathNormalization",
			"description": "deprecated synonym for expandWindowsPath",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "// deprecated synonym for expandWindowsPath\nDiscoveryFunctions.pathNormalization(${1:host}, ${2:install_root});$0 // deprecated"
		},
		"DiscoveryFunctions.getCleanedupPath(path, os) -> path_normalized // deprecated": {
			"prefix": "DiscoveryFunctions.getCleanedupPath",
			"description": "deprecated function to normalize a path, like normalizePath, but without expanding Windows short names;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "// deprecated synonym for expandWindowsPath\nDiscoveryFunctions.getCleanedupPath(${1:path}, ${2:os});$0 // deprecated"
		},
		"getCleanedupPath(path, os) -> path_normalized // deprecated": {
			"prefix": "getCleanedupPath",
			"description": "deprecated function to normalize a path, like normalizePath, but without expanding Windows short names;",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "// deprecated synonym for expandWindowsPath\nDiscoveryFunctions.getCleanedupPath(${1:path}, ${2:os});$0 // deprecated"
		},
		"DiscoveryFunctions.expandWindowsPath(host, path) -> expanded": {
			"prefix": "DiscoveryFunctions.expandWindowsPath",
			"description": "Convert short-form DOS 8.3 names in path into the long form.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.expandWindowsPath(${1:host}, ${2:path});$0"
		},
		"expandWindowsPath(host, path) -> expanded": {
			"prefix": "expandWindowsPath",
			"description": "Convert short-form DOS 8.3 names in path into the long form.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.expandWindowsPath(${1:host}, ${2:path});$0"
		},
		"DiscoveryFunctions.getMaxVersion(ver1, ver2) -> maxversion": {
			"prefix": "DiscoveryFunctions.getMaxVersion",
			"description": "DiscoveryFunctions.getMaxVersion() -> compares two versions and returns the highest one.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.getMaxVersion(${1:ver1}, ${2:ver2});$0"
		},
		"getMaxVersion(ver1, ver2) -> maxversion": {
			"prefix": "getMaxVersion",
			"description": "DiscoveryFunctions.getMaxVersion() -> compares two versions and returns the highest one.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.getMaxVersion(${1:ver1}, ${2:ver2});$0"
		},
		"DiscoveryFunctions.getExeCwdPath(process, expected_binary_name) -> exe_path, cwd_path": {
			"prefix": "DiscoveryFunctions.getExeCwdPath",
			"description": "DiscoveryFunctions.getExeCwdPath() -> returns full path of the binary file location and the full path from where it's been execute.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.getExeCwdPath(${1:process}, ${2:expected_binary_name});$0"
		},
		"getExeCwdPath(process, expected_binary_name) -> exe_path, cwd_path": {
			"prefix": "getExeCwdPath",
			"description": "DiscoveryFunctions.getExeCwdPath() -> returns full path of the binary file location and the full path from where it's been execute.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.getExeCwdPath(${1:process}, ${2:expected_binary_name});$0"
		},
		"DiscoveryFunctions.sortList(list) -> sorted_list": {
			"prefix": "DiscoveryFunctions.sortList",
			"description": "DiscoveryFunctions.sortList() -> sorts the list and returns its sorted copy.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.sortList(${1:list});$0"
		},
		"sortList(list) -> sorted_list": {
			"prefix": "sortList",
			"description": "DiscoveryFunctions.sortList() -> sorts the list and returns its sorted copy.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.sortList(${1:list});$0"
		},
		"DiscoveryFunctions.runActiveCommand(host, command_line, expected_content_regex := none, priv_cmd := none) -> result": {
			"prefix": "DiscoveryFunctions.runActiveCommand",
			"description": "DiscoveryFunctions.runActiveCommand() -> runs the command and then re-runs it with privileged permissions if needed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.runActiveCommand(${1:host}, ${2:command_line}, expected_content_regex := ${3:none}, priv_cmd := ${4:none});$0"
		},
		"runActiveCommand(host, command_line, expected_content_regex := none, priv_cmd := none) -> result": {
			"prefix": "runActiveCommand",
			"description": "DiscoveryFunctions.runActiveCommand() -> runs the command and then re-runs it with privileged permissions if needed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.runActiveCommand(${1:host}, ${2:command_line}, expected_content_regex := ${3:none}, priv_cmd := ${4:none});$0"
		},
		"DiscoveryFunctions.runFutureActiveCommand(host, command_line, expected_content_regex := none, priv_cmd := none, full_process := full_process) -> result": {
			"prefix": "DiscoveryFunctions.runFutureActiveCommand",
			"description": "DiscoveryFunctions.runFutureActiveCommand() -> runs the command and then re-runs it with privileged permissions if needed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.runFutureActiveCommand(${1:host}, ${2:command_line}, expected_content_regex := ${3:none}, priv_cmd := ${4:none}, full_process := ${5:full_process});$0"
		},
		"runFutureActiveCommand(host, command_line, expected_content_regex := none, priv_cmd := none, full_process := full_process) -> result": {
			"prefix": "runFutureActiveCommand",
			"description": "DiscoveryFunctions.runFutureActiveCommand() -> runs the command and then re-runs it with privileged permissions if needed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.runFutureActiveCommand(${1:host}, ${2:command_line}, expected_content_regex := ${3:none}, priv_cmd := ${4:none}, full_process := ${5:full_process});$0"
		},
		"DiscoveryFunctions.locateCommands(host, command_list) -> result": {
			"prefix": "DiscoveryFunctions.locateCommands",
			"description": "DiscoveryFunctions.locateCommands() -> searches for the location of the provided command list.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.locateCommands(${1:host}, ${2:command_list});$0"
		},
		"locateCommands(host, command_list) -> result": {
			"prefix": "locateCommands",
			"description": "DiscoveryFunctions.locateCommands() -> searches for the location of the provided command list.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.locateCommands(${1:host}, ${2:command_list});$0"
		},
		"DiscoveryFunctions.checkCommandList(host, command_list) -> result": {
			"prefix": "DiscoveryFunctions.checkCommandList",
			"description": "DiscoveryFunctions.checkCommandList() -> checks that the list of commands exist on the given Host.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.checkCommandList(${1:host}, ${2:command_list});$0"
		},
		"checkCommandList(host, command_list) -> result": {
			"prefix": "checkCommandList",
			"description": "DiscoveryFunctions.checkCommandList() -> checks that the list of commands exist on the given Host.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "DiscoveryFunctions.checkCommandList(${1:host}, ${2:command_list});$0"
		},
		"DiscoveryFunctions.getErrorRegexes(arg1, arg2) -> result": {
			"prefix": "DiscoveryFunctions.getErrorRegexes",
			"description": "returns a list of known regexes to parse errored command outputs",
			"body": "// This is not implemented yet. Reffer to DiscoveryFunctions 1.7 docstrings"
		},
		"getErrorRegexes(arg1, arg2) -> result": {
			"prefix": "getErrorRegexes",
			"description": "returns a list of known regexes to parse errored command outputs",
			"body": "// This is not implemented yet. Reffer to DiscoveryFunctions 1.7 docstrings"
		},
		"OLD rdbms_functions.oracle_ora_file_parser(section_name, oracle_ora_file_content) -> section": {
			"prefix": "_rdbms_functions.oracle_ora_file_parser",
			"description": "OLD rdbms_functions.oracle_ora_file_parser -> function tries to obtain full section from Oracle listener.ora or tnsnames.ora file. ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.oracleOraFileParser)\nrdbms_functions.oracle_ora_file_parser(${1:section_name}, ${2:oracle_ora_file_content});$0"
		},
		"OLD rdbms_functions.perform_rdbms_sis_search(related_sis_raw, rel_si_type, instance, port, db_name, extended) -> related_rdbms_sis": {
			"prefix": "_rdbms_functions.perform_rdbms_sis_search",
			"description": "OLD rdbms_functions.perform_rdbms_sis_search -> This internal function is used by related_rdbms_sis_search() and related_rdbms_sis_search_extended() and searches for specific RDBMS SI \"rel_si_type\" TYPE on \"rel_host_address\" host, which can be uniquely identified by attribute (depends on RDBMS Type) ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.performRdbmsSisSearch)\nrdbms_functions.perform_rdbms_sis_search(${1:related_sis_raw}, ${2:rel_si_type}, ${3:instance}, ${4:port}, ${5:db_name}, ${6:extended});$0"
		},
		"OLD rdbms_functions.related_rdbms_sis_search(host, rel_host_address, rel_si_type, instance, port, db_name, extended) -> related_rdbms_sis": {
			"prefix": "_rdbms_functions.related_rdbms_sis_search",
			"description": "OLD rdbms_functions.related_rdbms_sis_search ->  Function searches for specific RDBMS SI \"rel_si_type\" TYPE on \"rel_host_address\" host. ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.performRdbmsSisSearch)\nrdbms_functions.related_rdbms_sis_search(${1:host}, ${2:rel_host_address}, ${3:rel_si_type}, ${4:instance}, ${5:port}, ${6:db_name}, ${7:extended});$0"
		},
		"OLD rdbms_functions.related_rdbms_sis_search_extended(host, rel_host_address, rel_si_type, instance, port, db_name, extended) -> related_rdbms_sis": {
			"prefix": "_rdbms_functions.related_rdbms_sis_search_extended",
			"description": "OLD rdbms_functions.related_rdbms_sis_search_extended -> Function searches for specific RDBMS SI \"rel_si_type\" TYPE on \"rel_host_address\" host. ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.performRdbmsSisSearch)\nrdbms_functions.related_rdbms_sis_search_extended(${1:host}, ${2:rel_host_address}, ${3:rel_si_type}, ${4:instance}, ${5:port}, ${6:db_name}, ${7:extended});$0"
		},
		"OLD rdbms_functions.oracle_net_service_name_search(host, net_service_name, tnsnames_file_full_location) -> related_oracle_si": {
			"prefix": "_rdbms_functions.oracle_net_service_name_search",
			"description": "OLD rdbms_functions.oracle_net_service_name_search -> Function returns Oracle Database SI which is end point for local <net_service_name>. ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.oracleNetServiceNameSearch)\nrdbms_functions.oracle_net_service_name_search(${1:host}, ${2:net_service_name}, ${3:tnsnames_file_full_location});$0"
		},
		"OLD rdbms_functions.dsn_rdbms_servers(host,dsn_name) -> db_srvs": {
			"prefix": "_rdbms_functions.dsn_rdbms_servers",
			"description": "OLD rdbms_functions.dsn_rdbms_servers -> Function returns related RDBMS SI by its DSN (Data Source Name) value. For WINDOWS ONLY! ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.dsnRdbmsServers)\nrdbms_functions.dsn_rdbms_servers(${1:host}, ${2:dsn_name});$0"
		},
		"OLD rdbms_functions.parseJDBC(url) -> db_type, db_host, db_port, db_name, oracle_tns_alias, oracle_service_name": {
			"prefix": "_rdbms_functions.parseJDBC",
			"description": "OLD rdbms_functions.parseJDBC -> Parse a JDBC URL and extract the details ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.parseJDBC)\nrdbms_functions.parseJDBC(${1:url});$0"
		},
		"OLD rdbms_functions.jdbc_search(host,jdbc_url) -> db_srvs": {
			"prefix": "_rdbms_functions.jdbc_search",
			"description": "OLD rdbms_functions.jdbc_search -> Function returns related RDBMS SI by JDBC URL value. First it parses the JDBC URL(the function from j2eeinferredmodel module was taken as a basis), then it uses related_rdbms_sis_search or oracle_net_service_name_search function to find the related RDBMS SIs. Supported RDBMS: MSSQL, Oracle, DB2, MySQL, PostgreSQL, Ingres DB, Sybase ASE, Informix. ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.performRdbmsSisSearch)\nrdbms_functions.jdbc_search(${1:host}, ${2:jdbc_url});$0"
		},
		"OLD rdbms_functions.find_db_server(host, server_address, port, si_type, db_details) -> server_nodes": {
			"prefix": "_rdbms_functions.find_db_server",
			"description": "OLD rdbms_functions.find_db_server -> Function that searches for the appropriate database server node based on the provided server details. ",
			"body": "// WARNING: This is an old implementation, please use new (RDBMSFunctions.performRdbmsSisSearch)\nrdbms_functions.find_db_server(${1:host}, ${2:server_address}, ${3:port}, ${4:si_type}, ${5:db_details});$0"
		},
		"RDBMSFunctions.oracleOraFileParser(section_name, oracle_ora_file_content) -> section": {
			"prefix": "RDBMSFunctions.oracleOraFileParser",
			"description": "obtains full section from Oracle listener.ora or tnsnames.ora files",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.oracleOraFileParser(${1:section_name}, ${2:oracle_ora_file_content}); // -> section$0"
		},
		"oracleOraFileParser(section_name, oracle_ora_file_content) -> section": {
			"prefix": "oracleOraFileParser",
			"description": "obtains full section from Oracle listener.ora or tnsnames.ora files",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.oracleOraFileParser(${1:section_name}, ${2:oracle_ora_file_content}); // -> section$0"
		},
		"RDBMSFunctions.performRdbmsSisSearch(related_sis_raw, rel_si_type, port, instance, db_name, ora_service_name, db2_copy_name) -> related_rdbms_nodes": {
			"prefix": "RDBMSFunctions.performRdbmsSisSearch",
			"description": "searches for the RDBMS Software by provided parameters",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.performRdbmsSisSearch(related_sis_raw = ${1:related_sis_raw},\n\t\t\t\t\t\t\t\t\t\t rel_si_type = ${2:rel_si_type},\n\t\t\t\t\t\t\t\t\t\t port = ${3:port},\n\t\t\t\t\t\t\t\t\t\t instance = ${4:instance},\n\t\t\t\t\t\t\t\t\t\t db_name = ${5:db_name},\n\t\t\t\t\t\t\t\t\t\t ora_service_name = ${6:ora_service_name},\n\t\t\t\t\t\t\t\t\t\t db2_copy_name = ${7:db2_copy_name}); // ->  -> related_rdbms_nodes$0"
		},
		"performRdbmsSisSearch(related_sis_raw, rel_si_type, port, instance, db_name, ora_service_name, db2_copy_name) -> related_rdbms_nodes": {
			"prefix": "performRdbmsSisSearch",
			"description": "searches for the RDBMS Software by provided parameters",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.performRdbmsSisSearch(related_sis_raw = ${1:related_sis_raw},\n\t\t\t\t\t\t\t\t\t\t rel_si_type = ${2:rel_si_type},\n\t\t\t\t\t\t\t\t\t\t port = ${3:port},\n\t\t\t\t\t\t\t\t\t\t instance = ${4:instance},\n\t\t\t\t\t\t\t\t\t\t db_name = ${5:db_name},\n\t\t\t\t\t\t\t\t\t\t ora_service_name = ${6:ora_service_name},\n\t\t\t\t\t\t\t\t\t\t db2_copy_name = ${7:db2_copy_name}); // ->  -> related_rdbms_nodes$0"
		},
		"RDBMSFunctions.oracleNetServiceNameSearch(host, net_service_name, tnsnames_file_full_location) -> ora_host, ora_sid, ora_service_name": {
			"prefix": "RDBMSFunctions.oracleNetServiceNameSearch",
			"description": "returns Oracle Database SI parameters by the provided Net Service Name",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.oracleNetServiceNameSearch(host = ${1:host},\n\t\t\t\t\t\t\t\t\t\t  net_service_name = ${2:net_service_name},\n\t\t\t\t\t\t\t\t\t\t  tnsnames_file_full_location = ${3:tnsnames_file_full_location}); // -> ora_host, ora_sid, ora_service_name$0"
		},
		"oracleNetServiceNameSearch(host, net_service_name, tnsnames_file_full_location) -> ora_host, ora_sid, ora_service_name": {
			"prefix": "oracleNetServiceNameSearch",
			"description": "returns Oracle Database SI parameters by the provided Net Service Name",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.oracleNetServiceNameSearch(host = ${1:host},\n\t\t\t\t\t\t\t\t\t\t  net_service_name = ${2:net_service_name},\n\t\t\t\t\t\t\t\t\t\t  tnsnames_file_full_location = ${3:tnsnames_file_full_location}); // -> ora_host, ora_sid, ora_service_name$0"
		},
		"RDBMSFunctions.dsnRdbmsServers(host,dsn_name) -> db_host, db_type, db_instance, ora_service_name, db_port, db_name": {
			"prefix": "RDBMSFunctions.dsnRdbmsServers",
			"description": "determines RDBMS Server details by the provided DSN",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.dsnRdbmsServers(host, ${1:dsn_name}); // -> db_host, db_type, db_instance, ora_service_name, db_port, db_name$0"
		},
		"dsnRdbmsServers(host,dsn_name) -> db_host, db_type, db_instance, ora_service_name, db_port, db_name": {
			"prefix": "dsnRdbmsServers",
			"description": "determines RDBMS Server details by the provided DSN",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.dsnRdbmsServers(host, ${1:dsn_name}); // -> db_host, db_type, db_instance, ora_service_name, db_port, db_name$0"
		},
		"RDBMSFunctions.parseJDBC(url) -> db_type, db_host, db_port, db_name, oracle_tns_alias, oracle_service_name": {
			"prefix": "RDBMSFunctions.parseJDBC",
			"description": "extracts RDBMS details by the provided JDBC URL",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.parseJDBC(${1:url}); // -> db_type, db_host, db_port, db_name, oracle_tns_alias, oracle_service_name$0"
		},
		"parseJDBC(url) -> db_type, db_host, db_port, db_name, oracle_tns_alias, oracle_service_name": {
			"prefix": "parseJDBC",
			"description": "extracts RDBMS details by the provided JDBC URL",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "RDBMSFunctions.parseJDBC(${1:url}); // -> db_type, db_host, db_port, db_name, oracle_tns_alias, oracle_service_name$0"
		},
		"SearchFunctions.getNodeIp(host, rel_host_address_domain) -> node_ip": {
			"prefix": "SearchFunctions.getNodeIp",
			"description": "converts alphanumeric Host address into IP address",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getNodeIp(host, ${1:rel_host_address_domain}); // -> node_ip$0"
		},
		"getNodeIp(host, rel_host_address_domain) -> node_ip": {
			"prefix": "getNodeIp",
			"description": "converts alphanumeric Host address into IP address",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getNodeIp(host, ${1:rel_host_address_domain}); // -> node_ip$0"
		},
		"SearchFunctions.getHostingNodes(host, node_address, balancer_port := none) -> hosting_nodes, nodes_type": {
			"prefix": "SearchFunctions.getHostingNodes",
			"description": "searches for Hosting Nodes",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getHostingNodes(host, ${1:node_address}, balancer_port := ${2:none}); // -> hosting_nodes, nodes_type$0"
		},
		"getHostingNodes(host, node_address, balancer_port := none) -> hosting_nodes, nodes_type": {
			"prefix": "getHostingNodes",
			"description": "searches for Hosting Nodes",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getHostingNodes(host, ${1:node_address}, balancer_port := ${2:none}); // -> hosting_nodes, nodes_type$0"
		},
		"SearchFunctions.getSoftwareNodes(evrything) -> software_nodes": {
			"prefix": "SearchFunctions.getSoftwareNodes",
			"description": "searches for software(SoftwareInstance, DatabaseDetail, SoftwareComponent or LoadBalancerService)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getSoftwareNodes(host,\n\t\t\t\t\t\t\t\t node_address           := ${1:none},\n\t\t\t\t\t\t\t\t software_type          := ${2:none},\n\t\t\t\t\t\t\t\t balancer_port          := ${3:none},\n\t\t\t\t\t\t\t\t port                   := ${4:none},\n\t\t\t\t\t\t\t\t instance               := ${5:none},\n\t\t\t\t\t\t\t\t listen_tcp_socket      := ${6:none},\n\t\t\t\t\t\t\t\t server_name            := ${7:none},\n\t\t\t\t\t\t\t\t installed_product      := ${8:none},\n\t\t\t\t\t\t\t\t db_name                := ${9:none},\n\t\t\t\t\t\t\t\t net_service_name       := ${10:none},\n\t\t\t\t\t\t\t\t ora_service_name       := ${11:none},\n\t\t\t\t\t\t\t\t db2_copy_name          := ${12:none},\n\t\t\t\t\t\t\t\t dsn_name               := ${13:none},\n\t\t\t\t\t\t\t\t jdbc_url               := ${14:none},\n\t\t\t\t\t\t\t\t tnsnames_file_location := ${15:none},\n\t\t\t\t\t\t\t\t get_remote_nodes_only  := ${16:none}\n\t\t\t\t\t\t\t\t); // -> software_nodes\n$0"
		},
		"getSoftwareNodes(evrything) -> software_nodes": {
			"prefix": "getSoftwareNodes",
			"description": "searches for software(SoftwareInstance, DatabaseDetail, SoftwareComponent or LoadBalancerService)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getSoftwareNodes(host,\n\t\t\t\t\t\t\t\t node_address           := ${1:none},\n\t\t\t\t\t\t\t\t software_type          := ${2:none},\n\t\t\t\t\t\t\t\t balancer_port          := ${3:none},\n\t\t\t\t\t\t\t\t port                   := ${4:none},\n\t\t\t\t\t\t\t\t instance               := ${5:none},\n\t\t\t\t\t\t\t\t listen_tcp_socket      := ${6:none},\n\t\t\t\t\t\t\t\t server_name            := ${7:none},\n\t\t\t\t\t\t\t\t installed_product      := ${8:none},\n\t\t\t\t\t\t\t\t db_name                := ${9:none},\n\t\t\t\t\t\t\t\t net_service_name       := ${10:none},\n\t\t\t\t\t\t\t\t ora_service_name       := ${11:none},\n\t\t\t\t\t\t\t\t db2_copy_name          := ${12:none},\n\t\t\t\t\t\t\t\t dsn_name               := ${13:none},\n\t\t\t\t\t\t\t\t jdbc_url               := ${14:none},\n\t\t\t\t\t\t\t\t tnsnames_file_location := ${15:none},\n\t\t\t\t\t\t\t\t get_remote_nodes_only  := ${16:none}\n\t\t\t\t\t\t\t\t); // -> software_nodes\n$0"
		},
		"SearchFunctions.getSI(related_node, si_types_raw) -> related_si": {
			"prefix": "SearchFunctions.getSI",
			"description": "returns the SI Node which is running behind LoadBalancer or hosts DatabaseDetail Node",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getSI(${1:related_node}, ${2:si_types_raw}); // -> related_si$0"
		},
		"getSI(related_node, si_types_raw) -> related_si": {
			"prefix": "getSI",
			"description": "returns the SI Node which is running behind LoadBalancer or hosts DatabaseDetail Node",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getSI(${1:related_node}, ${2:si_types_raw}); // -> related_si$0"
		},
		"SearchFunctions.relatedSisSearchOnMultipleHosts(host, rel_host_addresses, rel_si_type) -> related_sis": {
			"prefix": "SearchFunctions.relatedSisSearchOnMultipleHosts",
			"description": "searches for software on multiple Hosts",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.relatedSisSearchOnMultipleHosts(host, rel_host_addresses = ${1:rel_host_addresses}, rel_si_type = ${2:rel_si_type}); // -> related_sis$0"
		},
		"relatedSisSearchOnMultipleHosts(host, rel_host_addresses, rel_si_type) -> related_sis": {
			"prefix": "relatedSisSearchOnMultipleHosts",
			"description": "searches for software on multiple Hosts",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.relatedSisSearchOnMultipleHosts(host, rel_host_addresses = ${1:rel_host_addresses}, rel_si_type = ${2:rel_si_type}); // -> related_sis$0"
		},
		"SearchFunctions.identifyHostWithUuid(uuid) -> searched_host": {
			"prefix": "SearchFunctions.identifyHostWithUuid",
			"description": "searches for the Host with the specific UUID",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.identifyHostWithUuid(${1:uuid}); // -> searched_host$0"
		},
		"identifyHostWithUuid(uuid) -> searched_host": {
			"prefix": "identifyHostWithUuid",
			"description": "searches for the Host with the specific UUID",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.identifyHostWithUuid(${1:uuid}); // -> searched_host$0"
		},
		"SearchFunctions.getSoftwareNodes(host, jdbc_url)": {
			"prefix": "_jdbc_url_SearchFunctions.getSoftwareNodes",
			"description": "Template of common SearchFunctions.getSoftwareNodes to find database via jdbc url.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getSoftwareNodes(host, jdbc_url := ${2:jdbc_url});\n$0"
		},
		"SearchFunctions.getSoftwareNodes(host, node_address, software_type, db_name)": {
			"prefix": "_db_host_type_SearchFunctions.getSoftwareNodes",
			"description": "Template of common SearchFunctions.getSoftwareNodes to find related database.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getSoftwareNodes(host,\n\t\t\t\t\t\t\t\t node_address  := ${1:db_host},\n\t\t\t\t\t\t\t\t software_type := ${2:db_type},\n\t\t\t\t\t\t\t\t db_name       := ${3:db_name}\n\t\t\t\t\t\t\t\t);\n$0"
		},
		"SearchFunctions.getSoftwareNodes(host, node_address, software_type, port, instance, db_name)": {
			"prefix": "_db_host_port_SearchFunctions.getSoftwareNodes",
			"description": "Template of common SearchFunctions.getSoftwareNodes to find related database by node_address, software_type, port, instance, db_name.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/User+defined+functions",
			"body": "SearchFunctions.getSoftwareNodes(host,\n\t\t\t\t\t\t\t\t node_address  := ${1:db_host},\n\t\t\t\t\t\t\t\t software_type := ${2:db_type},\n\t\t\t\t\t\t\t\t port          := ${3:port},\n\t\t\t\t\t\t\t\t instance      := ${4:instance},\n\t\t\t\t\t\t\t\t db_name       := ${5:db_name}\n\t\t\t\t\t\t\t\t);\n$0"
		},
		"full ver (\\\\d+(?:\\\\.\\\\d+)*) greedy": {
			"prefix": "_regex_full_ver",
			"description": "Template regex expression to catch full version.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "(\\\\d+(?:\\\\.\\\\d+)*)$0"
		},
		"full ver ^(\\\\d+(?:\\\\.\\\\d+)?) zero or one": {
			"prefix": "_regex_full_ver_",
			"description": "Template regex expression to catch full version from start if string.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "^(\\\\d+(?:\\\\.\\\\d+)?)$0"
		},
		"product ver (\\\\d+(?:\\\\.\\\\d+)?) zero or one": {
			"prefix": "_regex_product_ver",
			"description": "Template regex expression to catch product version.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "(\\\\d+(?:\\\\.\\\\d+)?)$0"
		},
		"bjavaw (?i)\\bjavaw?(?:\\\\.exe)\\$": {
			"prefix": "_regex_bjavaw",
			"description": "Template regex expression to catch bjavaw cmd.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "(?i)\\bjavaw?(?:\\\\.exe)\\$$0"
		},
		"bjava (?i)\\bjava(?:\\\\.exe)?\\$": {
			"prefix": "_regex_bjava",
			"description": "Template regex expression to catch bjava cmd.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "(?i)\\bjava(?:\\\\.exe)?\\$$0"
		},
		"java (?i)^(\\w:.*\\)Java\\": {
			"prefix": "_regex_java",
			"description": "Template regex expression to catch java cmd.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "(?i)^(\\w:.*\\)Java\\$0"
		},
		"java (/\\\\.+/)java/": {
			"prefix": "_regex_java",
			"description": "Template regex expression to catch java cmd.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "^(/\\\\.+/)java/$0"
		},
		"ipv4 (\\\\d+(?:\\\\.\\\\d+){3})": {
			"prefix": "_regex_ipv4",
			"description": "Template regex expression to catch ipv4.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "(\\\\d+(?:\\\\.\\\\d+){3})$0"
		},
		"ver ^(\\\\d+)": {
			"prefix": "_regex_ver",
			"description": "Template regex expression to catch simple decimals.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "^(\\\\d+)$0"
		},
		"ver ^\\\\d+\\$": {
			"prefix": "_regex_ver",
			"description": "Template regex expression to catch simple decimals.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "^\\\\d+\\$$0"
		},
		"Win_path catch path with spaces": {
			"prefix": "_regex_Win_path",
			"description": "Template regex expression to catch path with spaces in windows.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "(?i)\\\"([^\"]+)PATH_TO_FILE_LIB\\\"$0"
		},
		"Win_path_alt catch path with spaces in windows, alternative": {
			"prefix": "_regex_Win_path_alt",
			"description": "Template regex expression to catch path with spaces in windows, alternative.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "([^\"]+)PATH_TO_FILE_CONF$0"
		},
		"inference.associate(inferred_node, associate)": {
			"prefix": "inference.associate",
			"description": "Create associate inference relationship(s) from the specified node(s) to the inferred node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/inference.associate",
			"body": "inference.associate(${1:inferred_node}, ${2:associate});$0"
		},
		"inference.contributor(inferred_node, contributor, contributes)": {
			"prefix": "inference.contributor",
			"description": "Create contributor inference relationship(s) from the specified node(s) to the inferred node, for attribute names specified in the contributes list.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/inference.contributor",
			"body": "inference.contributor(${1:inferred_node}, ${2:contributor}, ${3:contributes});$0"
		},
		"inference.primary(inferred_node, primary)": {
			"prefix": "inference.primary",
			"description": "Create primary inference relationship(s) from the specified node(s) to the inferred node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/inference.primary",
			"body": "inference.primary(${1:inferred_node}, ${2:primary});$0"
		},
		"inference.relation(inferred_relationship, source)": {
			"prefix": "inference.relation",
			"description": "Create relation inference relationship(s) from the specified node(s) to the inferred relationship.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/inference.relation",
			"body": "inference.relation(${1:inferred_relationship}, ${2:source});$0"
		},
		"inference.withdrawal(inferred_node, evidence, withdrawn)": {
			"prefix": "inference.withdrawal",
			"description": "Create withdrawal inference relationship(s) from the specified node(s) to the inferred node, indicating the withdrawal of the withdrawn attribute name.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/inference.withdrawal",
			"body": "inference.withdrawal(${1:inferred_node}, ${2:evidence}, ${3:withdrawn});$0"
		},
		"inference.destruction(destroyed_node, source)": {
			"prefix": "inference.destruction",
			"description": "When destroying a node, indicate that the source node was responsible for its destruction.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/inference.destruction",
			"body": "inference.destruction(${1:destroyed_node}, ${2:source});$0"
		},
		"system.getOption(option_name)": {
			"prefix": "system.getOption",
			"description": "Takes the name of a BMC Discovery system option and returns the value.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/",
			"body": "system.getOption(${1:option_name});$0"
		},
		"system.cmdbSync(nodes)": {
			"prefix": "system.cmdbSync",
			"description": "Addssystem.cmdbSync the given root node or list of root nodes to the CMDB synchronization queue for all sync connections where continuous synchronization is enabled.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/",
			"body": "system.cmdbSync(${1:nodes});$0"
		},
		"model.addContainment(container, containees)": {
			"prefix": "model.addContainment",
			"description": "Adds the containees to the container by creating suitable relationships between the nodes. containees can be a single node, or a list of nodes, for example: [node1, node2].",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.addContainment",
			"body": "model.addContainment(${1:si_node}, ${2:software_components});$0"
		},
		"model.setContainment(container, containees)": {
			"prefix": "model.setContainment",
			"description": "Equivalent to addContainment, except that at the end of the pattern body,\nany relationships to contained nodes that have not been confirmed by setContainment or addContainment calls are removed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.setContainment",
			"body": "model.setContainment(${1:cluster_si_node}, ${2:related_sis});$0"
		},
		"model.destroy(node)": {
			"prefix": "model.destroy",
			"description": "Destroy the specified node or relationship in the model. (Not usually used in pattern bodies, but in removal sections.)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.destroy",
			"body": "model.destroy(${1:dummy});$0"
		},
		"model.withdraw(node, attribute)": {
			"prefix": "model.withdraw",
			"description": "Removes the named attribute from the node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.withdraw",
			"body": "model.withdraw(si_node, \"${1:detail}\");$0"
		},
		"model.setRemovalGroup(node, [name])": {
			"prefix": "model.setRemovalGroup",
			"description": "Add the specified node or nodes to a named removal group. The purpose of this function is to identify a group of nodes.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.setRemovalGroup",
			"body": "model.setRemovalGroup(${1:cluster_si}, \"${2:Dummy_Server_Cluster}\");$0"
		},
		"model.anchorRemovalGroup(node, [name])": {
			"prefix": "model.anchorRemovalGroup",
			"description": "Specify an anchor node for a named removal group. If a group name is not specified the default name group is used.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.anchorRemovalGroup",
			"body": "model.anchorRemovalGroup(${1:si}, \"${2:license_dts}\");$0"
		},
		"model.suppressRemovalGroup([name])": {
			"prefix": "model.suppressRemovalGroup",
			"description": "Suppress removal of the named removal group. If a group name is not specified the default name group is used. ",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.suppressRemovalGroup",
			"body": "model.suppressRemovalGroup(\"%${1:detail_type}%\");$0"
		},
		"model.host(node)": {
			"prefix": "model.host",
			"description": "Returns the Host node corresponding to the given node.\nThe given node can be any directly discovered data node, or a Software Instance or Business Application Instance.\nIf more than one Host is related to the given node\n(for example a Business Application Instance spread across multiple Hosts),\nan arbitrary one of the Hosts is returned.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.host",
			"body": "model.host(${1:process});$0"
		},
		"model.hosts(node)": {
			"prefix": "model.hosts",
			"description": "Returns a list of all the Host nodes corresponding to the given node.\nAs with model.host, the given node can be any directly discovered data node\nor a Software Instance or Business Application Instance.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.hosts",
			"body": "model.hosts(${1:model_sis});$0"
		},
		"model.findPackages(node, regexes)": {
			"prefix": "model.findPackages",
			"description": "Traverses from the node, which must be a Host or a directly discovered data node,\nand returns a set of all Package nodes that have names matching the provided list of regular expressions.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.findPackages",
			"body": "model.findPackages(host, [regex \"${1:}\"]);$0"
		},
		"model.addDisplayAttribute(node, value)": {
			"prefix": "model.addDisplayAttribute",
			"description": "Adds a named attribute, or a list of named attributes to the additional attributes displayed in a node view. Added attributes can be removed using model.removeDisplayAttribute.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO113/model.addDisplayAttribute",
			"body": "model.addDisplayAttribute(${1:node}, ${2:value});$0"
		},
		"model.removeDisplayAttribute(node, value)": {
			"prefix": "model.removeDisplayAttribute",
			"description": "Removes a named attribute, or a list of named attributes from the additional attributes displayed in a node view. Additional attributes are added using the model.addDisplayAttribute function.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO113/model.removeDisplayAttribute",
			"body": "model.removeDisplayAttribute(${1:node}, ${2:value});$0"
		},
		"model.kind(node)": {
			"prefix": "model.kind",
			"description": "Returns the node kind corresponding to the given node.The given node can be any node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/model.kind",
			"body": "model.kind(${1:hosting_node});$0"
		},
		"model.rel.Communication(Server, Client)": {
			"prefix": "rel_Communication",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.Communication(Server := ${1:related_sis}, Client := ${2:si_node});$0"
		},
		"model.rel.Containment(Contained, Container)": {
			"prefix": "rel_Containment",
			"description": {
				"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope."
			},
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.Containment(Contained := ${1:cluster_member_node}, Container := ${2:cluster});$0"
		},
		"model.rel.Dependency(Dependant, DependedUpon)": {
			"prefix": "rel_Dependency",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.Dependency(Dependant := ${1:si_node}, DependedUpon := ${2:dep_si});$0"
		},
		"model.rel.Detail(ElementWithDetail, Detail)": {
			"prefix": "rel_Detail",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.Detail(ElementWithDetail := ${1:si_node}, Detail := ${2:details});$0"
		},
		"model.rel.HostContainment(HostContainer, ContainedHost)": {
			"prefix": "rel_HostContainment",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.HostContainment(HostContainer := ${1:si_node}, ContainedHost := ${2:host});$0"
		},
		"model.rel.HostedFile(HostedFile, Host)": {
			"prefix": "rel_HostedFile",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.HostedFile(HostedFile := ${1:file}, Host := ${2:host});$0"
		},
		"model.rel.HostedSoftware(Host, RunningSoftware)": {
			"prefix": "rel_HostedSoftware",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.HostedSoftware(Host := ${1:host}, RunningSoftware := ${2:si_node});$0"
		},
		"model.rel.Management(Manager, ManagedElement)": {
			"prefix": "rel_Management",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.Management(Manager := ${1:manager_si}, ManagedElement := ${2:si_node});$0"
		},
		"model.rel.RelatedFile(ElementUsingFile, File)": {
			"prefix": "rel_RelatedFile",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.RelatedFile(ElementUsingFile := ${1:si_node}, File := ${2:file});$0"
		},
		"model.rel.SoftwareService(ServiceProvider, Service)": {
			"prefix": "rel_SoftwareService",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.SoftwareService(ServiceProvider := ${1:si_node}, Service := ${2:cluster});$0"
		},
		"model.rel.SoftwareContainment(SoftwareContainer, ContainedSoftware)": {
			"prefix": "rel_SoftwareContainment",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.SoftwareContainment(SoftwareContainer := ${1:si_node}, ContainedSoftware := ${2:sc_lst});$0"
		},
		"model.rel.StorageUse(Consumer, Provider)": {
			"prefix": "rel_StorageUse",
			"description": "Where additional relationships are required, they can be created explicitly.\nFor each relationship defined in the taxonomy,\na corresponding function is also defined in the model.rel scope.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Modelrelationshipexistencefunctions",
			"body": "model.rel.StorageUse(Consumer := ${1:virtual_disk}, Provider := ${2:dest_disks});$0"
		},
		"model.uniquerel.Communication(Server, Client)": {
			"prefix": "uniquerel_Communication",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.Communication(Server := ${1:related_sis}, Client := ${2:si_node});$0"
		},
		"model.uniquerel.Containment(Contained, Container)": {
			"prefix": "uniquerel_Containment",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.Containment(Contained := ${1:cluster_member_node}, Container := ${2:cluster});$0"
		},
		"model.uniquerel.Dependency(Dependant, DependedUpon)": {
			"prefix": "uniquerel_Dependency",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.Dependency(Dependant := ${1:si_node}, DependedUpon := ${2:dep_si});$0"
		},
		"model.uniquerel.Detail(ElementWithDetail, Detail)": {
			"prefix": "uniquerel_Detail",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.Detail(ElementWithDetail := ${1:si_node}, Detail := ${2:details});$0"
		},
		"model.uniquerel.HostContainment(HostContainer, ContainedHost)": {
			"prefix": "uniquerel_HostContainment",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.HostContainment(HostContainer := ${1:si_node}, ContainedHost := ${2:host});$0"
		},
		"model.uniquerel.HostedFile(HostedFile, Host)": {
			"prefix": "uniquerel_HostedFile",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.HostedFile(HostedFile := ${1:file}, Host := ${2:host});$0"
		},
		"model.uniquerel.HostedSoftware(Host, RunningSoftware)": {
			"prefix": "uniquerel_HostedSoftware",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.HostedSoftware(Host := ${1:host}, RunningSoftware := ${2:si_node});$0"
		},
		"model.uniquerel.HostedService(ServiceHost, RunningService)": {
			"prefix": "uniquerel_HostedService",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.HostedService(ServiceHost := ${1:cluster}, RunningService := ${2:cluster_service_node});$0"
		},
		"model.uniquerel.Management(Manager, ManagedElement)": {
			"prefix": "uniquerel_Management",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.Management(Manager := ${1:manager_si}, ManagedElement := ${2:si_node});$0"
		},
		"model.uniquerel.RelatedFile(ElementUsingFile, File)": {
			"prefix": "uniquerel_RelatedFile",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.RelatedFile(ElementUsingFile := ${1:si_node}, File := ${2:file});$0"
		},
		"model.uniquerel.SoftwareService(ServiceProvider, Service)": {
			"prefix": "uniquerel_SoftwareService",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.SoftwareService(ServiceProvider := ${1:si_node}, Service := ${2:cluster});$0"
		},
		"model.uniquerel.SoftwareContainment(SoftwareContainer, ContainedSoftware)": {
			"prefix": "uniquerel_SoftwareContainment",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.SoftwareContainment(SoftwareContainer := ${1:si_node}, ContainedSoftware := ${2:sc_lst});$0"
		},
		"model.uniquerel.StorageUse(Consumer, Provider)": {
			"prefix": "uniquerel_StorageUse",
			"description": "It takes the same form as the equivalent model.rel function, but its behaviour is different\n- If a relationship already exists between the source and destination, its attributes are updated.\n- If a relationship does not exist from the source to the destination it is created.\n- All other matching relationships from the source to other destinations are destroyed.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Model+functions#Modelfunctions-Uniquerelationshipfunctions",
			"body": "model.uniquerel.StorageUse(Consumer := ${1:virtual_disk}, Provider := ${2:dest_disks});$0"
		},
		"SoftwareInstance Short": {
			"prefix": "SoftwareInstance_Short_",
			"body": "model.SoftwareInstance(key := key,\n\t$0name := name,\n\t$0short_name := short_name\n\t);$0"
		},
		"SoftwareInstance Key": {
			"prefix": "SoftwareInstance_Key_",
			"body": "model.SoftwareInstance(key             := \"%port%/%key_si_type%/%host.key%\",\n$0\t\t\t\t\t   name            := name,\n$0\t\t\t\t\t   short_name      := short_name,\n$0\t\t\t\t\t   version         := full_version,\n$0\t\t\t\t\t   product_version := product_version,\n$0\t\t\t\t\t   port            := port,\n$0\t\t\t\t\t   listening_ports := listening_ports,\n$0\t\t\t\t\t   type            := si_type\n$0\t\t\t\t\t   );\n$0"
		},
		"SoftwareInstance Key_group": {
			"prefix": "SoftwareInstance_Key_group_",
			"body": "model.SoftwareInstance(key             := \"%port%/%key_si_type%/%host.key%\",\n$0\t\t\t\t\t   name            := name,\n$0\t\t\t\t\t   short_name      := short_name,\n$0\t\t\t\t\t   version         := full_version,\n$0\t\t\t\t\t   product_version := product_version,\n$0\t\t\t\t\t   port            := port,\n$0\t\t\t\t\t   listening_ports := listening_ports,\n$0\t\t\t\t\t   type            := si_type\n$0\t\t\t\t\t   );\n$0"
		},
		"SoftwareInstance Detailed": {
			"prefix": "SoftwareInstance_Detailed_",
			"body": "model.SoftwareInstance(key              := \"%product_version%/%si_type%/%host.key%\",\n$0\t\t\t\t\t\t   name             := name,\n$0\t\t\t\t\t\t   short_name       := short_name,\n$0\t\t\t\t\t\t   version          := full_version,\n$0\t\t\t\t\t\t   product_version  := product_version,\n$0\t\t\t\t\t\t   publisher        := publisher,\n$0\t\t\t\t\t\t   product          := product,\n$0\t\t\t\t\t\t   type             := si_type\n$0\t\t\t\t\t\t  );\n$0"
		},
		"Communication type model.uniquerel.": {
			"prefix": "Communication_type_model.uniquerel._",
			"body": "model.uniquerel.Communication(Server := ${1:related_sis}, Client := ${2:si_node}, type := \"${3:%type%}\");$0"
		},
		"number.toChar(number)": {
			"prefix": "number.toChar",
			"description": "Converts the integer number in the ASCII range to a character.If the value is outside the ASCII range, it returns none.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/number.toChar",
			"body": "number.toChar(${1:number});$0"
		},
		"number.toText(number)": {
			"prefix": "number.toText",
			"description": "Converts the integer number to a text form",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/number.toText",
			"body": "number.toText(${1:number});$0"
		},
		"number.range(number)": {
			"prefix": "number.range",
			"description": "Generate a list containing 0 to number - 1. If number is less than 1 the list will be empty.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/number.range",
			"body": "number.range(${1:number});$0"
		},
		"text.lower(string)": {
			"prefix": "text.lower",
			"description": "Returns the lower-cased version of the string argument.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.lower",
			"body": "text.lower(string)$0"
		},
		"text.upper(string)": {
			"prefix": "text.upper",
			"description": "Returns the upper-cased version of the string argument.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.upper",
			"body": "text.upper(string)$0"
		},
		"text.toNumber(string [, base ] )": {
			"prefix": "text.toNumber",
			"description": "Converts its string argument into a number.\nBy default, the number is treated as a base 10 value; if the optional base is provided,\nthe number is treated as being in the specified base. Bases from 2 to 36 are supported.\nBases larger than 10 use the letters a through z to represent digits.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.toNumber",
			"body": "text.toNumber(port);$0"
		},
		"text.replace(string, old, new)": {
			"prefix": "text.replace",
			"description": "Returns a modified version of the string formed by replacing all occurrences of the string old with new.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.replace",
			"body": "text.replace(${1:where_string}, \"${2:from_char}\", \"${3:to_char}\");$0"
		},
		"text.replace() -> replace , to .": {
			"prefix": "_text.replace_col",
			"description": "Template to replace common characters.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.replace",
			"body": "text.replace(${1:string}, \",\", \".\");$0"
		},
		"text.replace() -> replace - to .": {
			"prefix": "_text.replace_min",
			"description": "Template to replace common characters.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.replace",
			"body": "text.replace(${1:string}, \"-\", \".\");$0"
		},
		"text.replace() -> replace \\\\ to \\\\\\\\": {
			"prefix": "_text.replace_sla",
			"description": "Template to replace common characters.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.replace",
			"body": "text.replace(${1:string}, \"\\\\\\\", \"\\\\\\\\\\\\\\\");$0"
		},
		"text.join(list, \"separator\")": {
			"prefix": "text.join",
			"description": "Returns a string containing all items in a list of strings joined with the specified separator.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.join",
			"body": "text.join(${1:list}, \"${2:separator}\");$0"
		},
		"text.split(string, [separator])": {
			"prefix": "text.split",
			"description": "Returns a list consisting of portions of the string split according to the separator string, where specified.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.split",
			"body": "text.split(${1:string}, \"${2:separator}\");$0"
		},
		"text.strip(string [, characters ] )": {
			"prefix": "text.strip",
			"description": "Strips unwanted characters from the start and end of the given string.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.strip",
			"body": "text.strip(${1:string});$0"
		},
		"text.leftStrip(string [, characters ] )": {
			"prefix": "text.leftStrip",
			"description": "Equivalent to text.strip, but only strips from the left side of the string.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.leftStrip",
			"body": "text.leftStrip(${1:string} [, ${2:characters} ] );$0"
		},
		"text.rightStrip(string [, characters ] )": {
			"prefix": "text.rightStrip",
			"description": "Equivalent to text.strip, but only strips from the right side of the string.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.rightStrip",
			"body": "text.rightStrip(${1:string} [, ${2:characters} ] );$0"
		},
		"text.hash(string)": {
			"prefix": "text.hash",
			"description": "Returns a hashed form of the string, generated with the MD5 hash algorithm.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.hash",
			"body": "text.hash(${1:string});$0"
		},
		"text.ordinal(string)": {
			"prefix": "text.ordinal",
			"description": "Returns the ordinal value of the string argument. The string must be one character in length.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/text.ordinal",
			"body": "text.ordinal(${1:string});$0"
		},
		"append list": {
			"prefix": "append_list_",
			"body": "list.append(${1:the_list}, ${2:string});$0"
		},
		"search(in da ::DiscoveryResult:ProcessList #DiscoveredProcess where pid": {
			"prefix": "_trav_rel_proc_parent",
			"description": "search(in da traverse DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:ProcessList traverse List:List:Member:DiscoveredProcess where pid",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "rel_services := search(in ${1:da_node} traverse DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:ProcessList\n\t\t\t\t\t   $0traverse List:List:Member:DiscoveredProcess where pid = %pproc_pid%);$0"
		},
		"search(in si ::SoftwareContainer:SoftwareInstance": {
			"prefix": "_trav_ContainedSoftware::SoftwareInstance",
			"description": "search(in si traverse ContainedSoftware:SoftwareContainment:SoftwareContainer:SoftwareInstance where type and key <> %key% step in SoftwareContainer:SoftwareContainment where #:ContainedSoftware:SoftwareInstance.key = si.key)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "obsolete_links := search(in ${1:related_si} traverse ContainedSoftware:SoftwareContainment:SoftwareContainer:SoftwareInstance\n\t\t\t\t\t\t where type = %${2:si_type}% and key <> %key%\n\t\t\t\t\t\t step in SoftwareContainer:SoftwareContainment\n\t\t\t\t\t\t where #:ContainedSoftware:SoftwareInstance.key = %${3:related_si}.key%);$0"
		},
		"search(in si ::DiscoveredProcess)": {
			"prefix": "_trav_InferredElement::DiscoveredProcess",
			"description": "search(in si traverse InferredElement:Inference:Primary:DiscoveredProcess)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "procs := search(in si traverse InferredElement:Inference:Primary:DiscoveredProcess);$0"
		},
		"search(in host traverse Host:HostedSoftware:RunningSoftware:SoftwareInstance where type)": {
			"prefix": "_trav_Host:HostedSoftware::SoftwareInstance",
			"description": "search(in host traverse Host:HostedSoftware:RunningSoftware:SoftwareInstance where type)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "some_si := search(in host traverse Host:HostedSoftware:RunningSoftware:SoftwareInstance\n\t\t\t\t  where ${1:type} = \"${2:type_here}\");$0"
		},
		"search(in si ::Communication:Server:SoftwareInstance where type": {
			"prefix": "_trav_Client::SoftwareInstance",
			"description": "search(in si traverse Client:Communication:Server:SoftwareInstance where type = smth)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "srv_si_list := search(in ${1:related_si} traverse Client:Communication:Server:SoftwareInstance where type = \"${2:type_here}\");$0"
		},
		"search(in si ::Client:SoftwareInstance where type": {
			"prefix": "_trav_Server::SoftwareInstance",
			"description": "search(in si traverse Server:Communication:Client:SoftwareInstance where type = smth)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "client_si_list := search(in ${1:related_si} traverse Server:Communication:Client:SoftwareInstance where type = \"${2:type_here}\");$0"
		},
		"search(in si ::SoftwareContainer:BusinessApplicationInstance where type": {
			"prefix": "_trav_ContainedSoftware::BusinessApplicationInstance",
			"description": "search(in si traverse ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance where type = si_type)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "bai_candidates := search(in ${1:related_si} traverse ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance where type = \"%${2:si_type}%\");$0"
		},
		"search(in host ::SoftwareInstance where type ::Detail:DatabaseDetail": {
			"prefix": "_trav_Host::SoftwareInstance",
			"description": "search(in host traverse Host:HostedSoftware:RunningSoftware:SoftwareInstance where type = smth traverse ElementWithDetail:Detail:Detail:DatabaseDetail where instance has subword subword)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "db2_si := search(in host traverse Host:HostedSoftware:RunningSoftware:SoftwareInstance where type = \"${1:type_here}\" traverse ElementWithDetail:Detail:Detail:DatabaseDetail where instance has subword '%${2:subword}%');$0"
		},
		"search(in si ::Detail:Detail:Detail where type": {
			"prefix": "_trav_ElementWithDetail::Detail",
			"description": "search(in si traverse ElementWithDetail:Detail:Detail:Detail where type = smth)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "existing_dts := search(in si traverse ElementWithDetail:Detail:Detail:Detail where ${1:type} = \"${2:type_here}\");$0"
		},
		"search(in si ::DependedUpon:SoftwareInstance": {
			"prefix": "_trav_Dependant::SoftwareInstance",
			"description": "search(in si traverse Dependant:Dependency:DependedUpon:SoftwareInstance)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "mains_si := search(in ${1:related_si} traverse Dependant:Dependency:DependedUpon:SoftwareInstance);$0"
		},
		"search(in si ::Communication:Server:SoftwareInstance": {
			"prefix": "_trav_Client::Server:SoftwareInstance",
			"description": "search(in si traverse Client:Communication:Server:SoftwareInstance)",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/Traversals",
			"body": "main_db_sis := search(in ${1:related_si} traverse Client:Communication:Server:SoftwareInstance);$0"
		},
		"log.debug(\"message\")": {
			"prefix": "log.debug",
			"description": "Log the given message with a debug level message. The log messages that are output automatically include the name of the pattern performing the log action.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/log.debug",
			"body": "log.debug(\"${1:message}\");$0"
		},
		"log.info(\"message\")": {
			"prefix": "log.info",
			"description": "Log the given message with a debug level message. The log messages that are output automatically include the name of the pattern performing the log action.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/log.info",
			"body": "log.info(\"${1:message}\");$0"
		},
		"log.warn(\"message\")": {
			"prefix": "log.warn",
			"description": "Log the given message with a debug level message. The log messages that are output automatically include the name of the pattern performing the log action.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/log.warn",
			"body": "log.warn(\"${1:message}\");$0"
		},
		"log.error(\"message\")": {
			"prefix": "log.error",
			"description": "Log the given message with a debug level message. The log messages that are output automatically include the name of the pattern performing the log action.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/log.error",
			"body": "log.error(\"${1:message}\");$0"
		},
		"log.critical(\"message\")": {
			"prefix": "log.critical",
			"description": "Log the given message with a debug level message. The log messages that are output automatically include the name of the pattern performing the log action.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/log.critical",
			"body": "log.critical(\"${1:message}\");$0"
		},
		"_debug simple": {
			"prefix": "_debug_simple_",
			"body": "log.debug(\"DEBUG_RUN: -----------> ${1:message} on line:\");$0"
		},
		"_warn simple": {
			"prefix": "_warn_simple_",
			"body": "log.warn(\"DEBUG_RUN: -----------> ${1:message} on line:\");$0"
		},
		"_debug %variable%": {
			"prefix": "_debug_%variable%_",
			"body": "log.debug(\"DEBUG_RUN: -----------> ${1:message} %${2:variable}% - ${4:message} on line:\");$0"
		},
		"_warn %variable%": {
			"prefix": "_warn_%variable%_",
			"body": "log.warn (\"DEBUG_RUN: -----------> ${1:message} %${2:variable}% - ${4:message} on line:\");$0"
		},
		"_debug %node.attrs%": {
			"prefix": "_debug_%node.attrs%_",
			"body": "log.debug(\"DEBUG_RUN: -----------> ${1:message} %${2:host}.${3:name}% - ${4:message} on line:\");$0"
		},
		"_debug %node.attrs% Exec": {
			"prefix": "_debug_%node.attrs%_Exec_",
			"body": "delta_time_tics := time.toTicks(time.current()) - time.toTicks(start_time);\nlog\\\\.debug(\"DEBUG_RUN: -----------> ${1:message} %${2:host}.${3:name}% - ${4:message} on line: Execution time:\" + number.toText(delta_time_tics/10000) + \"ms\");$0"
		},
		"_info log SI": {
			"prefix": "_info_log_SI_",
			"body": "log.info(\"%host.name%: SI created for %${1:si_type}%\");$0"
		},
		"regex.extract(string, expression [, substitution] [, no_match])": {
			"prefix": "regex.extract",
			"description": "Returns the result of extracting the regular expression from the string, optionally with a substitution expression and a specified result if no match is found. Returns an empty string, or the string specified in no_match if the expression does not match. ",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "regex.extract(${1:string}, ${2:expression}, raw '\\\\1', no_match := '${3:NoMatch}');$0"
		},
		"regex.extractAll(string, pattern)": {
			"prefix": "regex.extractAll",
			"description": "Returns a list containing all the non-overlapping matches of the pattern in the string. If the pattern contains more than one group, returns a list of lists containing the groups in order.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "regex.extractAll(${1:string}, ${2:pattern});$0"
		},
		"regex.extract(variable, regex regex_raw, raw '\\\\1')": {
			"prefix": "regex.extract_Var",
			"description": "Tamplate for regex - extracting from: variable with some content in it.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "regex.extract(${1:variable}, regex \"${2:regex_raw}\", raw '\\\\1');$0"
		},
		"regex.extract(node.attrs, regex regex_raw, raw '\\\\1')": {
			"prefix": "regex.extract_node.attrs",
			"description": "Tamplate for regex - extracting from: node with attribues.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "regex.extract(${1:node}.${2:attrs}, regex \"${3:regex_raw}\", raw '\\\\1');$0"
		},
		"regex.extract(variable, regex regex_raw, raw '\\\\1', raw '\\\\2)": {
			"prefix": "regex.extract_raw_1,2",
			"description": "Tamplate for regex - extracting from: variable with two groups to check.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/regex.extract",
			"body": "regex.extract(${1:variable}, regex \"${2:regex_raw}\", raw '\\\\${3:1}', raw '\\\\${4:2}');$0"
		},
		"xpath.evaluate(string, expression)": {
			"prefix": "xpath.evaluate",
			"description": "Returns the result of evaluating the xpath expression against the XML string. Returns a list of strings containing the selected values. The result is always a list, even if the expression is guaranteed to always return just one result.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/xpath.evaluate",
			"body": "xpath.evaluate(${1:some_file_path}, \"${2:xpath_string}\");$0"
		},
		"xpath.openDocument(string)": {
			"prefix": "xpath.openDocument",
			"description": "Returns the DOM object resulting from parsing the XML string. The DOM object returned is suitable for passing to xpath.evaluate.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/xpath.openDocument",
			"body": "xpath.openDocument(${1:some_file_path});$0"
		},
		"xpath.closeDocument(DOM object)": {
			"prefix": "xpath.closeDocument",
			"description": "Closes the DOM object resulting from xpath.openDocument.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/xpath.closeDocument",
			"body": "xpath.closeDocument(${1:some_file_path});$0"
		},
		"table( [ parameters ] )": {
			"prefix": "table",
			"description": "Creates a new table.With no parameters, creates an empty table. If parameters are given, initializes the table with items where the keys are the parameter names and the values are the parameter values.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/table",
			"body": "table();$0"
		},
		"table.remove(table, key)": {
			"prefix": "table.remove",
			"description": "Removes the specified key from the specified table.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/table.remove",
			"body": "table.remove(${1:table}, ${2:key});$0"
		},
		"related.detailContainer(node)": {
			"prefix": "related.detailContainer",
			"description": "Returns the Software Component, Software Instance, or Business Application Instance node containing the given node.The given node can be a Detail or DatabaseDetail. If no single container node can be found None is returned.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/related.detailContainer",
			"body": "related.detailContainer(${1:node});$0"
		},
		"related.hostingNode( [\"fallback_kind\"], attributes...)": {
			"prefix": "related.hostingNode",
			"description": "Returns a Host or Cluster node that is associated with the node that triggered the pattern.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/related.hostingNode",
			"body": "related.hostingNode(\"${1:Cluster}\", type := \"${2:SQL Server}\", properties := ${3:required_properties});$0"
		},
		"related.host(node)": {
			"prefix": "related.host",
			"description": "Returns the Host node corresponding to the given node.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/related.host",
			"body": "related.host(${1:node});$0"
		},
		"mail.send(recipients, subject, message)": {
			"prefix": "mail.send",
			"description": "Sends an email. recipients is a single string containing an email address, or a list of email address strings; subject is the subject line to use in the email; message is the message contents.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/mail.send",
			"body": "mail.send(${1:recipients}, ${2:subject}, ${3:message});$0"
		},
		"time.current()": {
			"prefix": "time.current",
			"description": "Returns an internal datetime object representing the current UTC time.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.current",
			"body": "time.current();$0"
		},
		"time.delta(days, hours, minutes, seconds)": {
			"prefix": "time.delta",
			"description": "Creates a time delta that can be added to or subtracted from a time represented by an internal datetime object. ",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.delta",
			"body": "time.delta(${1:days}, ${2:hours}, ${3:minutes}, ${4:seconds});$0"
		},
		"time.parseLocal(string)": {
			"prefix": "time.parseLocal",
			"description": "Converts a string representing a local time into an internal UTC datetime object. If no time zone is present in the string it will use the time zone of the appliance.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.parseLocal",
			"body": "time.parseLocal(${1:string});$0"
		},
		"time.parseUTC(string)": {
			"prefix": "time.parseUTC",
			"description": "Take a UTC time string and converts it into an internal datetime object. It is not adjusted for timezones or daylight saving time. ",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.parseUTC",
			"body": "time.parseUTC(${1:string});$0"
		},
		"time.formatLocal(datetime [, format ])": {
			"prefix": "time.formatLocal",
			"description": "Formats an internal datetime object into a human-readable string.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.formatLocal",
			"body": "time.formatUTC(${1:lastRebootedDate}, raw \"%m/%d/%Y %H:%M:%S\");$0"
		},
		"time.formatUTC(datetime [, format ])": {
			"prefix": "time.formatUTC",
			"description": "Formats an internal datetime object into a human-readable string.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.formatUTC",
			"body": "time.formatUTC(${1:datetime} [, format ]);$0"
		},
		"time.toTicks(datetime)": {
			"prefix": "time.toTicks",
			"description": "Converts an internal datatime object (UTC) to ticks.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.toTicks",
			"body": "time.toTicks(${1:datetime});$0"
		},
		"time.fromTicks(ticks)": {
			"prefix": "time.fromTicks",
			"description": "Converts ticks to an internal datetime object (UTC).",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.fromTicks",
			"body": "time.fromTicks(${1:ticks});$0"
		},
		"time.deltaFromTicks(ticks)": {
			"prefix": "time.deltaFromTicks",
			"description": "Converts ticks into a time delta.",
			"descriptionMoreURL": "https://docs.bmc.com/docs/display/DISCO111/time.deltaFromTicks",
			"body": "time.deltaFromTicks(${1:ticks});$0"
		},
		"_regex Simple Identifiers": {
			"prefix": "_regex_Simple_Identifiers_",
			"body": "(?1:regex )/}\"${1:regex}\" -> \"${2:product_name}\";$0"
		},
		"_windows_cmd Simple Identifiers": {
			"prefix": "_windows_cmd_Simple_Identifiers_",
			"body": "(?1:windows_cmd )/}\"${1:windows_cmd}\" -> \"${2:product_name}\";$0"
		},
		"_unix_cmd Simple Identifiers": {
			"prefix": "_unix_cmd_Simple_Identifiers_",
			"body": "(?1:unix_cmd )/}\"${1:unix_cmd}\" -> \"${2:product_name}\";$0"
		},
		"_os_class host.os_class": {
			"prefix": "_os_class_host.os_class_",
			"body": "if host.os_class = \"Windows\" then\n\tsep := '\\\\\\';\nelse\n\tsep := '/';\nend if;\n$0"
		}
	}
}